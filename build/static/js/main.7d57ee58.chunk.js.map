{"version":3,"sources":["Network.js","Vis.js","serviceWorker.js","index.js"],"names":["Network","width","height","draw","nodeSet","linkSet","currLayer","data","simulation","d3","force","id","d","distance","value","svg","attr","link","append","classed","selectAll","join","node","Math","sqrt","group","on","$","remove","this","clickedData","filter","obj","name","select","text","clicked","productCount","numChildren","subtreeProductCount","info","layer","console","log","subTreeSet","netData","map","Object","create","call","active","alphaTarget","restart","fx","x","fy","y","drag","source","target","rootName","netSet","forEach","push","then","firstLayer","defaultNet","defaultLinks","className","Component","Vis","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d57ee58.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n    render() {\n        const width = 1500;\n        const height = 800;\n        function info(clicked, data) {\n            if (clicked) {\n                $(\"#root\").append(\n                    \"<div class='infoBox'>\" +\n                        \"<h2>Category Information</h2>\" +\n                        \"<text>Category Name: \" + data.name + \"</text>\" +\n                        \"<text>Category id: \" + data.id + \"</text>\" +\n                        \"<text>Number of Products: \" + data.productCount + \"</text>\" +\n                        \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" +\n                        \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" +\n                    \"</div>\");\n            } else {\n                $(\".infoBox\").remove();\n            }\n        }\n        function color() {\n            const scale = d3.scaleOrdinal(d3.schemeCategory10);\n            return d => scale(d.group);\n        }\n        function drag(simulation) {\n            function dragStart(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            }\n            function dragged(d) {\n                d.fx = d3.event.x;\n                d.fy = d3.event.y;\n            }\n            function dragEnd(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = null;\n                d.fy = null;\n            }\n            return d3.drag()\n                .on(\"start\", dragStart)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragEnd);\n        }\n        function draw(nodeSet, linkSet, currLayer, data) {\n            let simulation = d3.forceSimulation(nodeSet)\n                .force(\"link\", d3.forceLink(linkSet).id(d => d.id))\n                .force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 1.5))\n                .force(\"charge\", d3.forceManyBody())\n                .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            let svg = d3.select(\"svg\")\n                .attr(\"viewBox\", [0, 0, width, height]);\n            let link = svg.append(\"g\")\n                .classed(\"links\", true)\n                .attr(\"stroke\", \"#999\")\n                .attr(\"stroke-opacity\", 0.6)\n                .selectAll(\"line\")\n                .data(linkSet)\n                .join(\"line\")\n                .attr(\"stroke-width\", 1.5);\n            let node = svg.append(\"g\")\n                .classed(\"nodes\", true)\n                .attr(\"stroke\", \"#fff\")\n                .attr(\"stroke-width\", 1.5)\n                .selectAll(\"circle\")\n                .data(nodeSet)\n                .join(\"circle\")\n                .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n                .attr(\"fill\", \"#2E86C1\")\n                .on(\"click\", function() {\n                    $(\".infoBox\").remove();\n                    d3.select(this)\n                        .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n                    let clickedData = currLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n                    info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n                    let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n                    console.log(layer);\n                    let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n                    console.log(subTreeSet);\n                    let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n                        linkSet = subTreeSet.link.map(d => Object.create(d));\n                    $(\".links\").remove();\n                    $(\".nodes\").remove();\n                    console.log(\"removed, ready to draw\");\n                    draw(nodeSet, linkSet, layer, data);\n                })\n                .call(drag(simulation));\n            node.append(\"title\")\n                .text(d => d.id);\n            simulation.on(\"tick\", () => {\n                link\n                    .attr(\"x1\", d => d.source.x)\n                    .attr(\"y1\", d => d.source.y)\n                    .attr(\"x2\", d => d.target.x)\n                    .attr(\"y2\", d => d.target.y);\n                node\n                    .attr(\"cx\", d => d.x)\n                    .attr(\"cy\", d => d.y);\n            });\n        }\n        function netData(layer, rootName) {\n            let netSet = {\n                node:[],\n                link:[]\n            };\n            layer.forEach(obj => {\n                netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n                if (obj.name !== rootName) {\n                    netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n                }\n            });\n            return netSet;\n        }\n        d3.csv(\"./all-nodes.csv\").then(data => {\n            console.log(data);\n            let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n            console.log(firstLayer);\n            // let defaultNet = {\n            //     node:[],\n            //     link:[]\n            // };\n            // firstLayer.forEach(obj => {\n            //     defaultNet.node.push({id: obj.name, group: +obj.numChildren});\n            //     if (obj.name !== \"root\") {\n            //         defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n            //     }\n            // });\n            let defaultNet = netData(firstLayer, \"root\");\n            console.log(defaultNet);\n            const defaultLinks = defaultNet.link.map(d => Object.create(d));\n            const defaultNodes = defaultNet.node.map(d => Object.create(d));\n            draw(defaultNodes, defaultLinks, firstLayer, data);\n            // const simulation = d3.forceSimulation(defaultNodes)\n            //     .force(\"link\", d3.forceLink(defaultLinks).id(d => d.id))\n            //     .force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5))\n            //     .force(\"charge\", d3.forceManyBody())\n            //     .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            // const svg = d3.select(\"svg\")\n            //     .attr(\"viewBox\", [0, 0, width, height]);\n            // const link = svg.append(\"g\")\n            //     .classed(\"links\", true)\n            //     .attr(\"stroke\", \"#999\")\n            //     .attr(\"stroke-opacity\", 0.6)\n            //     .selectAll(\"line\")\n            //     .data(defaultLinks)\n            //     .join(\"line\")\n            //     .attr(\"stroke-width\", 1.5);\n            // const node = svg.append(\"g\")\n            //     .classed(\"nodes\", true)\n            //     .attr(\"stroke\", \"#fff\")\n            //     .attr(\"stroke-width\", 1.5)\n            //     .selectAll(\"circle\")\n            //     .data(defaultNodes)\n            //     .join(\"circle\")\n            //     .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n            //     .attr(\"fill\", \"#2E86C1\")\n            //     .on(\"click\", function() {\n            //         $(\".infoBox\").remove();\n            //         d3.select(this)\n            //             .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n            //         let clickedData = firstLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n            //         info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n            //         console.log(clickedData[0]);\n            //\n            //         let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n            //         console.log(layer);\n            //         let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n            //         console.log(subTreeSet);\n            //         let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n            //             linkSet = subTreeSet.link.map(d => Object.create(d));\n            //         $(\".links\").remove();\n            //         $(\".nodes\").remove();\n            //         console.log(\"removed, ready to draw\");\n            //         draw(nodeSet, linkSet, layer, data);\n            //     })\n            //     .call(drag(simulation));\n            // node.append(\"title\")\n            //     .text(d => d.id);\n            // simulation.on(\"tick\", () => {\n            //     link\n            //         .attr(\"x1\", d => d.source.x)\n            //         .attr(\"y1\", d => d.source.y)\n            //         .attr(\"x2\", d => d.target.x)\n            //         .attr(\"y2\", d => d.target.y);\n            //     node\n            //         .attr(\"cx\", d => d.x)\n            //         .attr(\"cy\", d => d.y);\n            // });\n        });\n        return (\n            <svg className=\"Net\" width={width} height={height}/>\n        )\n    }\n}\nexport default Network;","import React from 'react';\nimport Network from './Network';\nimport \"./Headline.css\";\nimport \"./Filters.css\";\n\nconst Vis = () => (\n    <div className=\"Vis\">\n        <div className=\"headline\">\n            <h1>Network of Amazon Products Categories</h1>\n        </div>\n        <div className=\"filters\">\n            <h4>Make a Selection of Category: </h4>\n            <select>\n                <option value=\"default\">-----------default------------</option>\n            </select>\n        </div>\n        <Network/>\n    </div>\n);\nexport default Vis;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Vis from './Vis';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Vis />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
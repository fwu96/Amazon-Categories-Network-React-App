{"ast":null,"code":"var _jsxFileName = \"/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Vis.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\nexport default class Vis extends Component {\n  // componentDidMount() {\n  //     Network(this.props);\n  // }\n  // componentDidUpdate(prevProps) {\n  //     Network(this.props);\n  // }\n  render() {\n    const width = 1500;\n    const height = 800;\n    d3.csv(\"./all-nodes.csv\").then(data => {\n      console.log(data);\n      let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n      console.log(firstLayer);\n      let defaultNet = {\n        node: [],\n        link: []\n      };\n      firstLayer.forEach(obj => {\n        defaultNet.node.push({\n          id: obj.name,\n          group: 1\n        });\n\n        if (obj.name !== \"root\") {\n          defaultNet.link.push({\n            source: \"root\",\n            target: obj.name,\n            value: +obj.numChildren\n          });\n        }\n      });\n      console.log(defaultNet);\n      const defaultLinks = defaultNet.link.map(d => Object.create(d));\n      const defaultNodes = defaultNet.node.map(d => Object.create(d));\n      const simulation = d3.forceSimulation(defaultNodes).force(\"link\", d3.forceLink(defaultLinks).id(d => d.id)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n      const svg = d3.select(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n      const link = svg.append(\"g\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(defaultLinks).join(\"line\").attr(\"stroke-width\", d => Math.sqrt(d.value));\n    });\n    return React.createElement(\"svg\", {\n      className: \"vis\",\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Vis.js"],"names":["React","Component","d3","Vis","render","width","height","csv","then","data","console","log","firstLayer","filter","obj","defaultNet","node","link","forEach","push","id","name","group","source","target","value","numChildren","defaultLinks","map","d","Object","create","defaultNodes","simulation","forceSimulation","force","forceLink","forceManyBody","forceCenter","svg","select","attr","append","selectAll","join","Math","sqrt"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport * as d3 from 'd3';\n\nexport default class Vis extends Component {\n    // componentDidMount() {\n    //     Network(this.props);\n    // }\n    // componentDidUpdate(prevProps) {\n    //     Network(this.props);\n    // }\n    render() {\n        const width = 1500;\n        const height = 800;\n        d3.csv(\"./all-nodes.csv\").then(data => {\n            console.log(data);\n            let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n            console.log(firstLayer);\n            let defaultNet = {\n                node:[],\n                link:[]\n            };\n            firstLayer.forEach(obj => {\n                defaultNet.node.push({id: obj.name, group: 1});\n                if (obj.name !== \"root\") {\n                    defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n                }\n            });\n            console.log(defaultNet);\n            const defaultLinks = defaultNet.link.map(d => Object.create(d));\n            const defaultNodes = defaultNet.node.map(d => Object.create(d));\n            const simulation = d3.forceSimulation(defaultNodes)\n                .force(\"link\", d3.forceLink(defaultLinks).id(d => d.id))\n                .force(\"charge\", d3.forceManyBody())\n                .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            const svg = d3.select(\"svg\")\n                .attr(\"viewBox\", [0, 0, width, height]);\n            const link = svg.append(\"g\")\n                .attr(\"stroke\", \"#999\")\n                .attr(\"stroke-opacity\", 0.6)\n                .selectAll(\"line\")\n                .data(defaultLinks)\n                .join(\"line\")\n                .attr(\"stroke-width\", d => Math.sqrt(d.value));\n            \n        });\n        return (\n            <svg className=\"vis\" width={width} height={height}/>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Vis.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\nimport Network from './Network';\n\nconst Vis = () => React.createElement(\"div\", {\n  className: \"Vis\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, React.createElement(Network, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}));\n\nexport default Vis; // export default class Vis extends Component {\n//     // componentDidMount() {\n//     //     Network(this.props);\n//     // }\n//     // componentDidUpdate(prevProps) {\n//     //     Network(this.props);\n//     // }\n//     render() {\n//         const width = 1500;\n//         const height = 800;\n//         function color() {\n//             const scale = d3.scaleOrdinal(d3.schemeCategory10);\n//             return d => scale(d.group);\n//         }\n//        function drag(simulation) {\n//             function dragStart(d) {\n//                 if (!d3.event.active) {\n//                     simulation.alphaTarget(0.3).restart();\n//                 }\n//                     d.fx = d.x;\n//                     d.fy = d.y;\n//             }\n//             function dragged(d) {\n//                 d.fx = d3.event.x;\n//                 d.fy = d3.event.y;\n//             }\n//             function dragEnd(d) {\n//                 if (!d3.event.active) {\n//                     simulation.alphaTarget(0);\n//                 }\n//                 d.fx = null;\n//                 d.fy = null;\n//             }\n//             return d3.drag()\n//                 .on(\"start\", dragStart)\n//                 .on(\"drag\", dragged)\n//                 .on(\"end\", dragEnd);\n//         }\n//         d3.csv(\"./all-nodes.csv\").then(data => {\n//             console.log(data);\n//             let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n//             console.log(firstLayer);\n//             let defaultNet = {\n//                 node:[],\n//                 link:[]\n//             };\n//             firstLayer.forEach(obj => {\n//                 defaultNet.node.push({id: obj.name, group: +obj.numChildren});\n//                 if (obj.name !== \"root\") {\n//                     defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n//                 }\n//             });\n//             console.log(defaultNet);\n//             const defaultLinks = defaultNet.link.map(d => Object.create(d));\n//             const defaultNodes = defaultNet.node.map(d => Object.create(d));\n//             const simulation = d3.forceSimulation(defaultNodes)\n//                 .force(\"link\", d3.forceLink(defaultLinks).id(d => d.id))\n//                 .force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5))\n//                 .force(\"charge\", d3.forceManyBody())\n//                 .force(\"center\", d3.forceCenter(width / 2, height / 2));\n//             const svg = d3.select(\"svg\")\n//                 .attr(\"viewBox\", [0, 0, width, height]);\n//             const link = svg.append(\"g\")\n//                 .attr(\"stroke\", \"#999\")\n//                 .attr(\"stroke-opacity\", 0.6)\n//                 .selectAll(\"line\")\n//                 .data(defaultLinks)\n//                 .join(\"line\")\n//                 .attr(\"stroke-width\", 1.5);\n//             const node = svg.append(\"g\")\n//                 .attr(\"stroke\", \"#fff\")\n//                 .attr(\"stroke-width\", 1.5)\n//                 .selectAll(\"circle\")\n//                 .data(defaultNodes)\n//                 .join(\"circle\")\n//                 .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n//                 .attr(\"fill\", color)\n//                 .call(drag(simulation));\n//             node.append(\"title\")\n//                 .text(d => d.id);\n//             simulation.on(\"tick\", () => {\n//                 link\n//                     .attr(\"x1\", d => d.source.x)\n//                     .attr(\"y1\", d => d.source.y)\n//                     .attr(\"x2\", d => d.target.x)\n//                     .attr(\"y2\", d => d.target.y);\n//                 node\n//                     .attr(\"cx\", d => d.x)\n//                     .attr(\"cy\", d => d.y);\n//             });\n//         });\n//         return (\n//             <svg className=\"vis\" width={width} height={height}/>\n//         )\n//     }\n// }","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Vis.js"],"names":["React","Component","d3","Network","Vis"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AACA,MAAMC,GAAG,GAAG,MACR;AAAK,EAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ;;AAKA,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from \"react\";\nimport * as d3 from 'd3';\nimport Network from './Network';\nconst Vis = () => (\n    <div className=\"Vis\">\n        <Network/>\n    </div>\n);\nexport default Vis;\n\n// export default class Vis extends Component {\n//     // componentDidMount() {\n//     //     Network(this.props);\n//     // }\n//     // componentDidUpdate(prevProps) {\n//     //     Network(this.props);\n//     // }\n//     render() {\n//         const width = 1500;\n//         const height = 800;\n//         function color() {\n//             const scale = d3.scaleOrdinal(d3.schemeCategory10);\n//             return d => scale(d.group);\n//         }\n//        function drag(simulation) {\n//             function dragStart(d) {\n//                 if (!d3.event.active) {\n//                     simulation.alphaTarget(0.3).restart();\n//                 }\n//                     d.fx = d.x;\n//                     d.fy = d.y;\n//             }\n//             function dragged(d) {\n//                 d.fx = d3.event.x;\n//                 d.fy = d3.event.y;\n//             }\n//             function dragEnd(d) {\n//                 if (!d3.event.active) {\n//                     simulation.alphaTarget(0);\n//                 }\n//                 d.fx = null;\n//                 d.fy = null;\n//             }\n//             return d3.drag()\n//                 .on(\"start\", dragStart)\n//                 .on(\"drag\", dragged)\n//                 .on(\"end\", dragEnd);\n//         }\n//         d3.csv(\"./all-nodes.csv\").then(data => {\n//             console.log(data);\n//             let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n//             console.log(firstLayer);\n//             let defaultNet = {\n//                 node:[],\n//                 link:[]\n//             };\n//             firstLayer.forEach(obj => {\n//                 defaultNet.node.push({id: obj.name, group: +obj.numChildren});\n//                 if (obj.name !== \"root\") {\n//                     defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n//                 }\n//             });\n//             console.log(defaultNet);\n//             const defaultLinks = defaultNet.link.map(d => Object.create(d));\n//             const defaultNodes = defaultNet.node.map(d => Object.create(d));\n//             const simulation = d3.forceSimulation(defaultNodes)\n//                 .force(\"link\", d3.forceLink(defaultLinks).id(d => d.id))\n//                 .force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5))\n//                 .force(\"charge\", d3.forceManyBody())\n//                 .force(\"center\", d3.forceCenter(width / 2, height / 2));\n//             const svg = d3.select(\"svg\")\n//                 .attr(\"viewBox\", [0, 0, width, height]);\n//             const link = svg.append(\"g\")\n//                 .attr(\"stroke\", \"#999\")\n//                 .attr(\"stroke-opacity\", 0.6)\n//                 .selectAll(\"line\")\n//                 .data(defaultLinks)\n//                 .join(\"line\")\n//                 .attr(\"stroke-width\", 1.5);\n//             const node = svg.append(\"g\")\n//                 .attr(\"stroke\", \"#fff\")\n//                 .attr(\"stroke-width\", 1.5)\n//                 .selectAll(\"circle\")\n//                 .data(defaultNodes)\n//                 .join(\"circle\")\n//                 .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n//                 .attr(\"fill\", color)\n//                 .call(drag(simulation));\n//             node.append(\"title\")\n//                 .text(d => d.id);\n//             simulation.on(\"tick\", () => {\n//                 link\n//                     .attr(\"x1\", d => d.source.x)\n//                     .attr(\"y1\", d => d.source.y)\n//                     .attr(\"x2\", d => d.target.x)\n//                     .attr(\"y2\", d => d.target.y);\n//                 node\n//                     .attr(\"cx\", d => d.x)\n//                     .attr(\"cy\", d => d.y);\n//             });\n//         });\n//         return (\n//             <svg className=\"vis\" width={width} height={height}/>\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}
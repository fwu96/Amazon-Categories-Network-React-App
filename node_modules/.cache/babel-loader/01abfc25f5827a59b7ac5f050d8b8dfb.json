{"ast":null,"code":"/**\n  * bootstrap-switch - Turn checkboxes and radio buttons into toggle switches.\n  *\n  * @version v3.4.0\n  * @homepage https://bttstrp.github.io/bootstrap-switch\n  * @author Mattia Larentis <mattia@larentis.eu> (http://larentis.eu)\n  * @license MIT\n  */\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['jquery'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require('jquery'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.jquery);\n    global.bootstrapSwitch = mod.exports;\n  }\n})(this, function (_jquery) {\n  'use strict';\n\n  var _jquery2 = _interopRequireDefault(_jquery);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var $ = _jquery2.default || window.jQuery || window.$;\n\n  function getClasses(options, id) {\n    var state = options.state,\n        size = options.size,\n        disabled = options.disabled,\n        readonly = options.readonly,\n        indeterminate = options.indeterminate,\n        inverse = options.inverse;\n    return [state ? 'on' : 'off', size, disabled ? 'disabled' : undefined, readonly ? 'readonly' : undefined, indeterminate ? 'indeterminate' : undefined, inverse ? 'inverse' : undefined, id ? 'id-' + id : undefined].filter(function (v) {\n      return v == null;\n    });\n  }\n\n  function prvgetElementOptions() {\n    return {\n      state: this.$element.is(':checked'),\n      size: this.$element.data('size'),\n      animate: this.$element.data('animate'),\n      disabled: this.$element.is(':disabled'),\n      readonly: this.$element.is('[readonly]'),\n      indeterminate: this.$element.data('indeterminate'),\n      inverse: this.$element.data('inverse'),\n      radioAllOff: this.$element.data('radio-all-off'),\n      onColor: this.$element.data('on-color'),\n      offColor: this.$element.data('off-color'),\n      onText: this.$element.data('on-text'),\n      offText: this.$element.data('off-text'),\n      labelText: this.$element.data('label-text'),\n      handleWidth: this.$element.data('handle-width'),\n      labelWidth: this.$element.data('label-width'),\n      baseClass: this.$element.data('base-class'),\n      wrapperClass: this.$element.data('wrapper-class')\n    };\n  }\n\n  function prvwidth() {\n    var _this = this;\n\n    var $handles = this.$on.add(this.$off).add(this.$label).css('width', '');\n    var handleWidth = this.options.handleWidth === 'auto' ? Math.round(Math.max(this.$on.width(), this.$off.width())) : this.options.handleWidth;\n    $handles.width(handleWidth);\n    this.$label.width(function (index, width) {\n      if (_this.options.labelWidth !== 'auto') {\n        return _this.options.labelWidth;\n      }\n\n      if (width < handleWidth) {\n        return handleWidth;\n      }\n\n      return width;\n    });\n    this.privateHandleWidth = this.$on.outerWidth();\n    this.privateLabelWidth = this.$label.outerWidth();\n    this.$container.width(this.privateHandleWidth * 2 + this.privateLabelWidth);\n    return this.$wrapper.width(this.privateHandleWidth + this.privateLabelWidth);\n  }\n\n  function prvcontainerPosition() {\n    var _this2 = this;\n\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.ope;\n    this.$container.css('margin-left', function () {\n      var values = [0, '-' + _this2.privateHandleWidth + 'px'];\n\n      if (_this2.options.indeterminate) {\n        return '-' + _this2.privateHandleWidth / 2 + 'px';\n      }\n\n      if (state) {\n        if (_this2.options.inverse) {\n          return values[1];\n        }\n\n        return values[0];\n      }\n\n      if (_this2.options.inverse) {\n        return values[0];\n      }\n\n      return values[1];\n    });\n  }\n\n  function prvgetClass(name) {\n    return this.options.baseClass + '-' + name;\n  }\n\n  function prvinit() {\n    var _this3 = this;\n\n    var init = function init() {\n      _this3.setPrevOptions();\n\n      prvwidth.call(_this3);\n      prvcontainerPosition.call(_this3);\n      setTimeout(function () {\n        return _this3.options.animate && _this3.$wrapper.addClass(prvgetClass.call(_this3, 'animate'));\n      }, 50);\n    };\n\n    if (this.$wrapper.is(':visible')) {\n      init();\n      return;\n    }\n\n    var initInterval = window.setInterval(function () {\n      return _this3.$wrapper.is(':visible') && (init() || true) && window.clearInterval(initInterval);\n    }, 50);\n  }\n\n  function prvelementHandlers() {\n    var _this4 = this;\n\n    return this.$element.on({\n      'setPreviousOptions.bootstrapSwitch': function setPreviousOptionsBootstrapSwitch() {\n        return _this4.setPrevOptions();\n      },\n      'previousState.bootstrapSwitch': function previousStateBootstrapSwitch() {\n        _this4.options = _this4.prevOptions;\n\n        if (_this4.options.indeterminate) {\n          _this4.$wrapper.addClass(prvgetClass.call(_this4, 'indeterminate'));\n        }\n\n        _this4.$element.prop('checked', _this4.options.state).trigger('change.bootstrapSwitch', true);\n      },\n      'change.bootstrapSwitch': function changeBootstrapSwitch(event, skip) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n\n        var state = _this4.$element.is(':checked');\n\n        prvcontainerPosition.call(_this4, state);\n\n        if (state === _this4.options.state) {\n          return;\n        }\n\n        _this4.options.state = state;\n\n        _this4.$wrapper.toggleClass(prvgetClass.call(_this4, 'off')).toggleClass(prvgetClass.call(_this4, 'on'));\n\n        if (!skip) {\n          if (_this4.$element.is(':radio')) {\n            $('[name=\"' + _this4.$element.attr('name') + '\"]').not(_this4.$element).prop('checked', false).trigger('change.bootstrapSwitch', true);\n          }\n\n          _this4.$element.trigger('switchChange.bootstrapSwitch', [state]);\n        }\n      },\n      'focus.bootstrapSwitch': function focusBootstrapSwitch(event) {\n        event.preventDefault();\n\n        _this4.$wrapper.addClass(prvgetClass.call(_this4, 'focused'));\n      },\n      'blur.bootstrapSwitch': function blurBootstrapSwitch(event) {\n        event.preventDefault();\n\n        _this4.$wrapper.removeClass(prvgetClass.call(_this4, 'focused'));\n      },\n      'keydown.bootstrapSwitch': function keydownBootstrapSwitch(event) {\n        if (!event.which || _this4.options.disabled || _this4.options.readonly) {\n          return;\n        }\n\n        if (event.which === 37 || event.which === 39) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n\n          _this4.state(event.which === 39);\n        }\n      }\n    });\n  }\n\n  function prvhandleHandlers() {\n    var _this5 = this;\n\n    this.$on.on('click.bootstrapSwitch', function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      _this5.state(false);\n\n      return _this5.$element.trigger('focus.bootstrapSwitch');\n    });\n    return this.$off.on('click.bootstrapSwitch', function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      _this5.state(true);\n\n      return _this5.$element.trigger('focus.bootstrapSwitch');\n    });\n  }\n\n  function prvlabelHandlers() {\n    var _this6 = this;\n\n    var dragStart = void 0;\n    var dragEnd = void 0;\n    var handlers = {\n      click: function click(event) {\n        event.stopPropagation();\n      },\n      'mousedown.bootstrapSwitch touchstart.bootstrapSwitch': function mousedownBootstrapSwitchTouchstartBootstrapSwitch(event) {\n        if (dragStart || _this6.options.disabled || _this6.options.readonly) {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        dragStart = (event.pageX || event.originalEvent.touches[0].pageX) - parseInt(_this6.$container.css('margin-left'), 10);\n\n        if (_this6.options.animate) {\n          _this6.$wrapper.removeClass(prvgetClass.call(_this6, 'animate'));\n        }\n\n        _this6.$element.trigger('focus.bootstrapSwitch');\n      },\n      'mousemove.bootstrapSwitch touchmove.bootstrapSwitch': function mousemoveBootstrapSwitchTouchmoveBootstrapSwitch(event) {\n        if (dragStart == null) {\n          return;\n        }\n\n        var difference = (event.pageX || event.originalEvent.touches[0].pageX) - dragStart;\n        event.preventDefault();\n\n        if (difference < -_this6.privateHandleWidth || difference > 0) {\n          return;\n        }\n\n        dragEnd = difference;\n\n        _this6.$container.css('margin-left', dragEnd + 'px');\n      },\n      'mouseup.bootstrapSwitch touchend.bootstrapSwitch': function mouseupBootstrapSwitchTouchendBootstrapSwitch(event) {\n        if (!dragStart) {\n          return;\n        }\n\n        event.preventDefault();\n\n        if (_this6.options.animate) {\n          _this6.$wrapper.addClass(prvgetClass.call(_this6, 'animate'));\n        }\n\n        if (dragEnd) {\n          var state = dragEnd > -(_this6.privateHandleWidth / 2);\n          dragEnd = false;\n\n          _this6.state(_this6.options.inverse ? !state : state);\n        } else {\n          _this6.state(!_this6.options.state);\n        }\n\n        dragStart = false;\n      },\n      'mouseleave.bootstrapSwitch': function mouseleaveBootstrapSwitch() {\n        _this6.$label.trigger('mouseup.bootstrapSwitch');\n      }\n    };\n    this.$label.on(handlers);\n  }\n\n  function prvexternalLabelHandler() {\n    var _this7 = this;\n\n    var $externalLabel = this.$element.closest('label');\n    $externalLabel.on('click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      if (event.target === $externalLabel[0]) {\n        _this7.toggleState();\n      }\n    });\n  }\n\n  function prvformHandler() {\n    function isBootstrapSwitch() {\n      return $(this).data('bootstrap-switch');\n    }\n\n    function performReset() {\n      return $(this).bootstrapSwitch('state', this.checked);\n    }\n\n    var $form = this.$element.closest('form');\n\n    if ($form.data('bootstrap-switch')) {\n      return;\n    }\n\n    $form.on('reset.bootstrapSwitch', function () {\n      window.setTimeout(function () {\n        $form.find('input').filter(isBootstrapSwitch).each(performReset);\n      }, 1);\n    }).data('bootstrap-switch', true);\n  }\n\n  function prvgetClasses(classes) {\n    var _this8 = this;\n\n    if (!$.isArray(classes)) {\n      return [prvgetClass.call(this, classes)];\n    }\n\n    return classes.map(function (v) {\n      return prvgetClass.call(_this8, v);\n    });\n  }\n\n  var BootstrapSwitch = function () {\n    function BootstrapSwitch(element) {\n      var _this9 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, BootstrapSwitch);\n\n      this.$element = $(element);\n      this.options = $.extend({}, $.fn.bootstrapSwitch.defaults, prvgetElementOptions.call(this), options);\n      this.prevOptions = {};\n      this.$wrapper = $('<div>', {\n        class: function _class() {\n          return getClasses(_this9.options, _this9.$element.attr('id')).map(function (v) {\n            return prvgetClass.call(_this9, v);\n          }).concat([_this9.options.baseClass], prvgetClasses.call(_this9, _this9.options.wrapperClass)).join(' ');\n        }\n      });\n      this.$container = $('<div>', {\n        class: prvgetClass.call(this, 'container')\n      });\n      this.$on = $('<span>', {\n        html: this.options.onText,\n        class: prvgetClass.call(this, 'handle-on') + ' ' + prvgetClass.call(this, this.options.onColor)\n      });\n      this.$off = $('<span>', {\n        html: this.options.offText,\n        class: prvgetClass.call(this, 'handle-off') + ' ' + prvgetClass.call(this, this.options.offColor)\n      });\n      this.$label = $('<span>', {\n        html: this.options.labelText,\n        class: prvgetClass.call(this, 'label')\n      });\n      this.$element.on('init.bootstrapSwitch', function () {\n        return _this9.options.onInit(element);\n      });\n      this.$element.on('switchChange.bootstrapSwitch', function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var changeState = _this9.options.onSwitchChange.apply(element, args);\n\n        if (changeState === false) {\n          if (_this9.$element.is(':radio')) {\n            $('[name=\"' + _this9.$element.attr('name') + '\"]').trigger('previousState.bootstrapSwitch', true);\n          } else {\n            _this9.$element.trigger('previousState.bootstrapSwitch', true);\n          }\n        }\n      });\n      this.$container = this.$element.wrap(this.$container).parent();\n      this.$wrapper = this.$container.wrap(this.$wrapper).parent();\n      this.$element.before(this.options.inverse ? this.$off : this.$on).before(this.$label).before(this.options.inverse ? this.$on : this.$off);\n\n      if (this.options.indeterminate) {\n        this.$element.prop('indeterminate', true);\n      }\n\n      prvinit.call(this);\n      prvelementHandlers.call(this);\n      prvhandleHandlers.call(this);\n      prvlabelHandlers.call(this);\n      prvformHandler.call(this);\n      prvexternalLabelHandler.call(this);\n      this.$element.trigger('init.bootstrapSwitch', this.options.state);\n    }\n\n    _createClass(BootstrapSwitch, [{\n      key: 'setPrevOptions',\n      value: function setPrevOptions() {\n        this.prevOptions = _extends({}, this.options);\n      }\n    }, {\n      key: 'state',\n      value: function state(value, skip) {\n        if (typeof value === 'undefined') {\n          return this.options.state;\n        }\n\n        if (this.options.disabled || this.options.readonly || this.options.state && !this.options.radioAllOff && this.$element.is(':radio')) {\n          return this.$element;\n        }\n\n        if (this.$element.is(':radio')) {\n          $('[name=\"' + this.$element.attr('name') + '\"]').trigger('setPreviousOptions.bootstrapSwitch');\n        } else {\n          this.$element.trigger('setPreviousOptions.bootstrapSwitch');\n        }\n\n        if (this.options.indeterminate) {\n          this.indeterminate(false);\n        }\n\n        this.$element.prop('checked', Boolean(value)).trigger('change.bootstrapSwitch', skip);\n        return this.$element;\n      }\n    }, {\n      key: 'toggleState',\n      value: function toggleState(skip) {\n        if (this.options.disabled || this.options.readonly) {\n          return this.$element;\n        }\n\n        if (this.options.indeterminate) {\n          this.indeterminate(false);\n          return this.state(true);\n        }\n\n        return this.$element.prop('checked', !this.options.state).trigger('change.bootstrapSwitch', skip);\n      }\n    }, {\n      key: 'size',\n      value: function size(value) {\n        if (typeof value === 'undefined') {\n          return this.options.size;\n        }\n\n        if (this.options.size != null) {\n          this.$wrapper.removeClass(prvgetClass.call(this, this.options.size));\n        }\n\n        if (value) {\n          this.$wrapper.addClass(prvgetClass.call(this, value));\n        }\n\n        prvwidth.call(this);\n        prvcontainerPosition.call(this);\n        this.options.size = value;\n        return this.$element;\n      }\n    }, {\n      key: 'animate',\n      value: function animate(value) {\n        if (typeof value === 'undefined') {\n          return this.options.animate;\n        }\n\n        if (this.options.animate === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleAnimate();\n      }\n    }, {\n      key: 'toggleAnimate',\n      value: function toggleAnimate() {\n        this.options.animate = !this.options.animate;\n        this.$wrapper.toggleClass(prvgetClass.call(this, 'animate'));\n        return this.$element;\n      }\n    }, {\n      key: 'disabled',\n      value: function disabled(value) {\n        if (typeof value === 'undefined') {\n          return this.options.disabled;\n        }\n\n        if (this.options.disabled === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleDisabled();\n      }\n    }, {\n      key: 'toggleDisabled',\n      value: function toggleDisabled() {\n        this.options.disabled = !this.options.disabled;\n        this.$element.prop('disabled', this.options.disabled);\n        this.$wrapper.toggleClass(prvgetClass.call(this, 'disabled'));\n        return this.$element;\n      }\n    }, {\n      key: 'readonly',\n      value: function readonly(value) {\n        if (typeof value === 'undefined') {\n          return this.options.readonly;\n        }\n\n        if (this.options.readonly === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleReadonly();\n      }\n    }, {\n      key: 'toggleReadonly',\n      value: function toggleReadonly() {\n        this.options.readonly = !this.options.readonly;\n        this.$element.prop('readonly', this.options.readonly);\n        this.$wrapper.toggleClass(prvgetClass.call(this, 'readonly'));\n        return this.$element;\n      }\n    }, {\n      key: 'indeterminate',\n      value: function indeterminate(value) {\n        if (typeof value === 'undefined') {\n          return this.options.indeterminate;\n        }\n\n        if (this.options.indeterminate === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleIndeterminate();\n      }\n    }, {\n      key: 'toggleIndeterminate',\n      value: function toggleIndeterminate() {\n        this.options.indeterminate = !this.options.indeterminate;\n        this.$element.prop('indeterminate', this.options.indeterminate);\n        this.$wrapper.toggleClass(prvgetClass.call(this, 'indeterminate'));\n        prvcontainerPosition.call(this);\n        return this.$element;\n      }\n    }, {\n      key: 'inverse',\n      value: function inverse(value) {\n        if (typeof value === 'undefined') {\n          return this.options.inverse;\n        }\n\n        if (this.options.inverse === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleInverse();\n      }\n    }, {\n      key: 'toggleInverse',\n      value: function toggleInverse() {\n        this.$wrapper.toggleClass(prvgetClass.call(this, 'inverse'));\n        var $on = this.$on.clone(true);\n        var $off = this.$off.clone(true);\n        this.$on.replaceWith($off);\n        this.$off.replaceWith($on);\n        this.$on = $off;\n        this.$off = $on;\n        this.options.inverse = !this.options.inverse;\n        return this.$element;\n      }\n    }, {\n      key: 'onColor',\n      value: function onColor(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onColor;\n        }\n\n        if (this.options.onColor) {\n          this.$on.removeClass(prvgetClass.call(this, this.options.onColor));\n        }\n\n        this.$on.addClass(prvgetClass.call(this, value));\n        this.options.onColor = value;\n        return this.$element;\n      }\n    }, {\n      key: 'offColor',\n      value: function offColor(value) {\n        if (typeof value === 'undefined') {\n          return this.options.offColor;\n        }\n\n        if (this.options.offColor) {\n          this.$off.removeClass(prvgetClass.call(this, this.options.offColor));\n        }\n\n        this.$off.addClass(prvgetClass.call(this, value));\n        this.options.offColor = value;\n        return this.$element;\n      }\n    }, {\n      key: 'onText',\n      value: function onText(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onText;\n        }\n\n        this.$on.html(value);\n        prvwidth.call(this);\n        prvcontainerPosition.call(this);\n        this.options.onText = value;\n        return this.$element;\n      }\n    }, {\n      key: 'offText',\n      value: function offText(value) {\n        if (typeof value === 'undefined') {\n          return this.options.offText;\n        }\n\n        this.$off.html(value);\n        prvwidth.call(this);\n        prvcontainerPosition.call(this);\n        this.options.offText = value;\n        return this.$element;\n      }\n    }, {\n      key: 'labelText',\n      value: function labelText(value) {\n        if (typeof value === 'undefined') {\n          return this.options.labelText;\n        }\n\n        this.$label.html(value);\n        prvwidth.call(this);\n        this.options.labelText = value;\n        return this.$element;\n      }\n    }, {\n      key: 'handleWidth',\n      value: function handleWidth(value) {\n        if (typeof value === 'undefined') {\n          return this.options.handleWidth;\n        }\n\n        this.options.handleWidth = value;\n        prvwidth.call(this);\n        prvcontainerPosition.call(this);\n        return this.$element;\n      }\n    }, {\n      key: 'labelWidth',\n      value: function labelWidth(value) {\n        if (typeof value === 'undefined') {\n          return this.options.labelWidth;\n        }\n\n        this.options.labelWidth = value;\n        prvwidth.call(this);\n        prvcontainerPosition.call(this);\n        return this.$element;\n      }\n    }, {\n      key: 'baseClass',\n      value: function baseClass() {\n        return this.options.baseClass;\n      }\n    }, {\n      key: 'wrapperClass',\n      value: function wrapperClass(value) {\n        if (typeof value === 'undefined') {\n          return this.options.wrapperClass;\n        }\n\n        var wrapperClass = value || $.fn.bootstrapSwitch.defaults.wrapperClass;\n        this.$wrapper.removeClass(prvgetClasses.call(this, this.options.wrapperClass).join(' '));\n        this.$wrapper.addClass(prvgetClasses.call(this, wrapperClass).join(' '));\n        this.options.wrapperClass = wrapperClass;\n        return this.$element;\n      }\n    }, {\n      key: 'radioAllOff',\n      value: function radioAllOff(value) {\n        if (typeof value === 'undefined') {\n          return this.options.radioAllOff;\n        }\n\n        var val = Boolean(value);\n\n        if (this.options.radioAllOff === val) {\n          return this.$element;\n        }\n\n        this.options.radioAllOff = val;\n        return this.$element;\n      }\n    }, {\n      key: 'onInit',\n      value: function onInit(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onInit;\n        }\n\n        this.options.onInit = value || $.fn.bootstrapSwitch.defaults.onInit;\n        return this.$element;\n      }\n    }, {\n      key: 'onSwitchChange',\n      value: function onSwitchChange(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onSwitchChange;\n        }\n\n        this.options.onSwitchChange = value || $.fn.bootstrapSwitch.defaults.onSwitchChange;\n        return this.$element;\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var $form = this.$element.closest('form');\n\n        if ($form.length) {\n          $form.off('reset.bootstrapSwitch').removeData('bootstrap-switch');\n        }\n\n        this.$container.children().not(this.$element).remove();\n        this.$element.unwrap().unwrap().off('.bootstrapSwitch').removeData('bootstrap-switch');\n        return this.$element;\n      }\n    }]);\n\n    return BootstrapSwitch;\n  }();\n\n  function bootstrapSwitch(option) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    function reducer(ret, next) {\n      var $this = $(next);\n      var existingData = $this.data('bootstrap-switch');\n      var data = existingData || new BootstrapSwitch(next, option);\n\n      if (!existingData) {\n        $this.data('bootstrap-switch', data);\n      }\n\n      if (typeof option === 'string') {\n        return data[option].apply(data, args);\n      }\n\n      return ret;\n    }\n\n    return Array.prototype.reduce.call(this, reducer, this);\n  }\n\n  $.fn.bootstrapSwitch = bootstrapSwitch;\n  $.fn.bootstrapSwitch.Constructor = BootstrapSwitch;\n  $.fn.bootstrapSwitch.defaults = {\n    state: true,\n    size: null,\n    animate: true,\n    disabled: false,\n    readonly: false,\n    indeterminate: false,\n    inverse: false,\n    radioAllOff: false,\n    onColor: 'primary',\n    offColor: 'default',\n    onText: 'ON',\n    offText: 'OFF',\n    labelText: '&nbsp',\n    handleWidth: 'auto',\n    labelWidth: 'auto',\n    baseClass: 'bootstrap-switch',\n    wrapperClass: 'wrapper',\n    onInit: function onInit() {},\n    onSwitchChange: function onSwitchChange() {}\n  };\n});","map":null,"metadata":{},"sourceType":"script"}
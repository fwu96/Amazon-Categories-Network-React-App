{"ast":null,"code":"import { drawNet, drawRadial, drawBar } from \"./Helper\";\nexport function netMode(data, dt) {\n  let layer = data.filter(obj => +obj[\"parent\"] === 0);\n  let defaultNet = netData(layer, \"root\", dt);\n  const defaultLinks = defaultNet.link.map(d => Object.create(d));\n  const defaultNodes = defaultNet.node.map(d => Object.create(d));\n  drawNet(defaultNodes, defaultLinks, layer, data, \"root\", dt);\n}\nexport function radialMode(data) {\n  let layer = data.filter(obj => +obj[\"parent\"] === 0);\n  let defaultData = radialData(layer, \"root\");\n  console.log(defaultData);\n  drawRadial(data, defaultData, layer);\n}\nexport function barMode(data) {\n  let layer = data.filter(obj => +obj[\"parent\"] === 0);\n  const defaultData = barData(layer, \"root\");\n  drawBar(data, defaultData, layer);\n}\n\nfunction netData(layer, rootName, dt) {\n  let netSet = {\n    node: [],\n    link: []\n  };\n  layer.forEach(obj => {\n    netSet.node.push({\n      id: obj.name,\n      group: +obj[dt]\n    });\n\n    if (obj.name !== rootName) {\n      netSet.link.push({\n        source: rootName,\n        target: obj.name,\n        value: +obj[dt]\n      });\n    }\n  });\n  return netSet;\n}\n\nfunction radialData(data, rootName) {\n  let radSet = [];\n  data.forEach(obj => {\n    if (obj.name !== rootName) {\n      radSet.push({\n        name: obj.name,\n        value: +obj[\"numChildren\"]\n      });\n    }\n  });\n  return radSet;\n}\n\nfunction barData(layer, rootName) {\n  let barSet = [];\n  layer.forEach(obj => {\n    if (obj.name !== rootName) {\n      barSet.push({\n        name: obj.name,\n        value: +obj[\"numChildren\"]\n      });\n    }\n  });\n  return barSet;\n}","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Draws.js"],"names":["drawNet","drawRadial","drawBar","netMode","data","dt","layer","filter","obj","defaultNet","netData","defaultLinks","link","map","d","Object","create","defaultNodes","node","radialMode","defaultData","radialData","console","log","barMode","barData","rootName","netSet","forEach","push","id","name","group","source","target","value","radSet","barSet"],"mappings":"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","sourcesContent":["import {drawNet, drawRadial, drawBar} from \"./Helper\";\n\nexport function netMode(data, dt) {\n    let layer = data.filter(obj => +obj[\"parent\"] === 0);\n    let defaultNet = netData(layer, \"root\", dt);\n    const defaultLinks = defaultNet.link.map(d => Object.create(d));\n    const defaultNodes = defaultNet.node.map(d => Object.create(d));\n    drawNet(defaultNodes, defaultLinks, layer, data, \"root\", dt);\n}\nexport function radialMode(data) {\n    let layer = data.filter(obj => +obj[\"parent\"] === 0);\n    let defaultData = radialData(layer, \"root\");\n    console.log(defaultData);\n    drawRadial(data, defaultData, layer);\n}\nexport function barMode(data) {\n    let layer = data.filter(obj => +obj[\"parent\"] === 0);\n    const defaultData = barData(layer, \"root\");\n    drawBar(data, defaultData, layer);\n}\nfunction netData(layer, rootName, dt) {\n    let netSet = {\n        node:[],\n        link:[]\n    };\n    layer.forEach(obj => {\n        netSet.node.push({id: obj.name, group: +obj[dt]});\n        if (obj.name !== rootName) {\n            netSet.link.push({source: rootName, target: obj.name, value: +obj[dt]})\n        }\n    });\n    return netSet;\n}\nfunction radialData(data, rootName) {\n    let radSet = [];\n    data.forEach(obj => {\n        if (obj.name !== rootName) {\n            radSet.push({name: obj.name, value: +obj[\"numChildren\"]});\n        }\n    });\n    return radSet;\n}\nfunction barData(layer, rootName) {\n    let barSet = [];\n    layer.forEach(obj => {\n        if (obj.name !== rootName) {\n            barSet.push({name: obj.name, value: +obj[\"numChildren\"]});\n        }\n    });\n    return barSet;\n}"]},"metadata":{},"sourceType":"module"}
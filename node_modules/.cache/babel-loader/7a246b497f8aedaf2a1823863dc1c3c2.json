{"ast":null,"code":"var _jsxFileName = \"/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Network.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport $ from \"jquery\";\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\nimport netMode from \"./Draws\";\n\nclass Network extends Component {\n  render() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    $(\"#numChildren\").on(\"change\", function () {\n      console.log(this.value);\n    });\n    d3.csv(\"./all-nodes.csv\").then(data => {\n      // console.log(data);\n      // let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n      // console.log(firstLayer);\n      // let defaultNet = netData(firstLayer, \"root\");\n      // console.log(defaultNet);\n      // const defaultLinks = defaultNet.link.map(d => Object.create(d));\n      // const defaultNodes = defaultNet.node.map(d => Object.create(d));\n      // drawNet(defaultNodes, defaultLinks, firstLayer, data, \"root\");\n      netMode(data);\n    });\n    return React.createElement(\"svg\", {\n      className: \"Net\",\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n  }\n\n} // function netMode(data) {\n//     let layer = data.filter(obj => +obj[\"parent\"] === 0);\n//     let defaultNet = netData(layer, \"root\");\n//     const defaultLinks = defaultNet.link.map(d => Object.create(d));\n//     const defaultNodes = defaultNet.node.map(d => Object.create(d));\n//     drawNet(defaultNodes, defaultLinks, layer, data, \"root\");\n// }\n// function netData(layer, rootName) {\n//     let netSet = {\n//         node:[],\n//         link:[]\n//     };\n//     layer.forEach(obj => {\n//         netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n//         if (obj.name !== rootName) {\n//             netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n//         }\n//     });\n//     return netSet;\n// }\n\n\nexport default Network;","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Network.js"],"names":["React","Component","d3","$","netMode","Network","render","width","window","innerWidth","height","innerHeight","on","console","log","value","csv","then","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,eAAP;AACA,OAAO,eAAP;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC5BK,EAAAA,MAAM,GAAG;AACL,UAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,UAAMC,MAAM,GAAGF,MAAM,CAACG,WAAtB;AACAR,IAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBS,EAAlB,CAAqB,QAArB,EAA+B,YAAW;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACH,KAFD;AAGAb,IAAAA,EAAE,CAACc,GAAH,CAAO,iBAAP,EAA0BC,IAA1B,CAA+BC,IAAI,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,MAAAA,OAAO,CAACc,IAAD,CAAP;AACH,KAVD;AAWA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAEX,KAA5B;AAAmC,MAAA,MAAM,EAAEG,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AArB2B,C,CAuBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeL,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport $ from \"jquery\";\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\nimport netMode from \"./Draws\";\n\nclass Network extends Component {\n    render() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        $(\"#numChildren\").on(\"change\", function() {\n            console.log(this.value);\n        });\n        d3.csv(\"./all-nodes.csv\").then(data => {\n            // console.log(data);\n            // let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n            // console.log(firstLayer);\n            // let defaultNet = netData(firstLayer, \"root\");\n            // console.log(defaultNet);\n            // const defaultLinks = defaultNet.link.map(d => Object.create(d));\n            // const defaultNodes = defaultNet.node.map(d => Object.create(d));\n            // drawNet(defaultNodes, defaultLinks, firstLayer, data, \"root\");\n            netMode(data);\n        });\n        return (\n            <svg className=\"Net\" width={width} height={height}/>\n        )\n    }\n}\n// function netMode(data) {\n//     let layer = data.filter(obj => +obj[\"parent\"] === 0);\n//     let defaultNet = netData(layer, \"root\");\n//     const defaultLinks = defaultNet.link.map(d => Object.create(d));\n//     const defaultNodes = defaultNet.node.map(d => Object.create(d));\n//     drawNet(defaultNodes, defaultLinks, layer, data, \"root\");\n// }\n// function netData(layer, rootName) {\n//     let netSet = {\n//         node:[],\n//         link:[]\n//     };\n//     layer.forEach(obj => {\n//         netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n//         if (obj.name !== rootName) {\n//             netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n//         }\n//     });\n//     return netSet;\n// }\nexport default Network;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { drawNet, drawRadial } from \"./Helper\";\nexport function netMode(data) {\n  let layer = data.filter(obj => +obj[\"parent\"] === 0);\n  let defaultNet = netData(layer, \"root\");\n  const defaultLinks = defaultNet.link.map(d => Object.create(d));\n  const defaultNodes = defaultNet.node.map(d => Object.create(d));\n  drawNet(defaultNodes, defaultLinks, layer, data, \"root\");\n}\nexport function radialMode(data) {\n  let layer = data.filter(obj => +obj[\"parent\"] === 0);\n  let defaultData = radialData(layer, \"root\");\n  console.log(defaultData);\n  drawRadial(data, defaultData, layer);\n}\nexport function barMode(data) {\n  console.log(data);\n  let defaultData = data.filter(obj => +obj[\"parent\"] === 0);\n  console.log(defaultData);\n}\n\nfunction netData(layer, rootName) {\n  let netSet = {\n    node: [],\n    link: []\n  };\n  layer.forEach(obj => {\n    netSet.node.push({\n      id: obj.name,\n      group: +obj[\"numChildren\"]\n    });\n\n    if (obj.name !== rootName) {\n      netSet.link.push({\n        source: rootName,\n        target: obj.name,\n        value: +obj[\"numChildren\"]\n      });\n    }\n  });\n  return netSet;\n}\n\nfunction radialData(data, rootName) {\n  let radSet = [];\n  data.forEach(obj => {\n    if (obj.name !== rootName) {\n      radSet.push({\n        name: obj.name,\n        value: +obj[\"numChildren\"]\n      });\n    }\n  });\n  return radSet;\n}","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Draws.js"],"names":["drawNet","drawRadial","netMode","data","layer","filter","obj","defaultNet","netData","defaultLinks","link","map","d","Object","create","defaultNodes","node","radialMode","defaultData","radialData","console","log","barMode","rootName","netSet","forEach","push","id","name","group","source","target","value","radSet"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,UAAjB,QAAkC,UAAlC;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAC1B,MAAIC,KAAK,GAAGD,IAAI,CAACE,MAAL,CAAYC,GAAG,IAAI,CAACA,GAAG,CAAC,QAAD,CAAJ,KAAmB,CAAtC,CAAZ;AACA,MAAIC,UAAU,GAAGC,OAAO,CAACJ,KAAD,EAAQ,MAAR,CAAxB;AACA,QAAMK,YAAY,GAAGF,UAAU,CAACG,IAAX,CAAgBC,GAAhB,CAAoBC,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAcF,CAAd,CAAzB,CAArB;AACA,QAAMG,YAAY,GAAGR,UAAU,CAACS,IAAX,CAAgBL,GAAhB,CAAoBC,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAcF,CAAd,CAAzB,CAArB;AACAZ,EAAAA,OAAO,CAACe,YAAD,EAAeN,YAAf,EAA6BL,KAA7B,EAAoCD,IAApC,EAA0C,MAA1C,CAAP;AACH;AACD,OAAO,SAASc,UAAT,CAAoBd,IAApB,EAA0B;AAC7B,MAAIC,KAAK,GAAGD,IAAI,CAACE,MAAL,CAAYC,GAAG,IAAI,CAACA,GAAG,CAAC,QAAD,CAAJ,KAAmB,CAAtC,CAAZ;AACA,MAAIY,WAAW,GAAGC,UAAU,CAACf,KAAD,EAAQ,MAAR,CAA5B;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACAjB,EAAAA,UAAU,CAACE,IAAD,EAAOe,WAAP,EAAoBd,KAApB,CAAV;AACH;AACD,OAAO,SAASkB,OAAT,CAAiBnB,IAAjB,EAAuB;AAC1BiB,EAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AACA,MAAIe,WAAW,GAAGf,IAAI,CAACE,MAAL,CAAYC,GAAG,IAAI,CAACA,GAAG,CAAC,QAAD,CAAJ,KAAmB,CAAtC,CAAlB;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACH;;AACD,SAASV,OAAT,CAAiBJ,KAAjB,EAAwBmB,QAAxB,EAAkC;AAC9B,MAAIC,MAAM,GAAG;AACTR,IAAAA,IAAI,EAAC,EADI;AAETN,IAAAA,IAAI,EAAC;AAFI,GAAb;AAIAN,EAAAA,KAAK,CAACqB,OAAN,CAAcnB,GAAG,IAAI;AACjBkB,IAAAA,MAAM,CAACR,IAAP,CAAYU,IAAZ,CAAiB;AAACC,MAAAA,EAAE,EAAErB,GAAG,CAACsB,IAAT;AAAeC,MAAAA,KAAK,EAAE,CAACvB,GAAG,CAAC,aAAD;AAA1B,KAAjB;;AACA,QAAIA,GAAG,CAACsB,IAAJ,KAAaL,QAAjB,EAA2B;AACvBC,MAAAA,MAAM,CAACd,IAAP,CAAYgB,IAAZ,CAAiB;AAACI,QAAAA,MAAM,EAAEP,QAAT;AAAmBQ,QAAAA,MAAM,EAAEzB,GAAG,CAACsB,IAA/B;AAAqCI,QAAAA,KAAK,EAAE,CAAC1B,GAAG,CAAC,aAAD;AAAhD,OAAjB;AACH;AACJ,GALD;AAMA,SAAOkB,MAAP;AACH;;AACD,SAASL,UAAT,CAAoBhB,IAApB,EAA0BoB,QAA1B,EAAoC;AAChC,MAAIU,MAAM,GAAG,EAAb;AACA9B,EAAAA,IAAI,CAACsB,OAAL,CAAanB,GAAG,IAAI;AAChB,QAAIA,GAAG,CAACsB,IAAJ,KAAaL,QAAjB,EAA2B;AACvBU,MAAAA,MAAM,CAACP,IAAP,CAAY;AAACE,QAAAA,IAAI,EAAEtB,GAAG,CAACsB,IAAX;AAAiBI,QAAAA,KAAK,EAAE,CAAC1B,GAAG,CAAC,aAAD;AAA5B,OAAZ;AACH;AACJ,GAJD;AAKA,SAAO2B,MAAP;AACH","sourcesContent":["import {drawNet, drawRadial} from \"./Helper\";\n\nexport function netMode(data) {\n    let layer = data.filter(obj => +obj[\"parent\"] === 0);\n    let defaultNet = netData(layer, \"root\");\n    const defaultLinks = defaultNet.link.map(d => Object.create(d));\n    const defaultNodes = defaultNet.node.map(d => Object.create(d));\n    drawNet(defaultNodes, defaultLinks, layer, data, \"root\");\n}\nexport function radialMode(data) {\n    let layer = data.filter(obj => +obj[\"parent\"] === 0);\n    let defaultData = radialData(layer, \"root\");\n    console.log(defaultData);\n    drawRadial(data, defaultData, layer);\n}\nexport function barMode(data) {\n    console.log(data);\n    let defaultData = data.filter(obj => +obj[\"parent\"] === 0);\n    console.log(defaultData);\n}\nfunction netData(layer, rootName) {\n    let netSet = {\n        node:[],\n        link:[]\n    };\n    layer.forEach(obj => {\n        netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n        if (obj.name !== rootName) {\n            netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n        }\n    });\n    return netSet;\n}\nfunction radialData(data, rootName) {\n    let radSet = [];\n    data.forEach(obj => {\n        if (obj.name !== rootName) {\n            radSet.push({name: obj.name, value: +obj[\"numChildren\"]});\n        }\n    });\n    return radSet;\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { drawNet, drawRadial } from \"./Helper\";\nexport function netMode(data) {\n  let layer = data.filter(obj => +obj[\"parent\"] === 0);\n  let defaultNet = netData(layer, \"root\");\n  const defaultLinks = defaultNet.link.map(d => Object.create(d));\n  const defaultNodes = defaultNet.node.map(d => Object.create(d));\n  drawNet(defaultNodes, defaultLinks, layer, data, \"root\");\n}\n\nfunction netData(layer, rootName) {\n  let netSet = {\n    node: [],\n    link: []\n  };\n  layer.forEach(obj => {\n    netSet.node.push({\n      id: obj.name,\n      group: +obj[\"numChildren\"]\n    });\n\n    if (obj.name !== rootName) {\n      netSet.link.push({\n        source: rootName,\n        target: obj.name,\n        value: +obj[\"numChildren\"]\n      });\n    }\n  });\n  return netSet;\n}\n\nexport function radialMode(data) {\n  let filteredData = data.filter(obj => +obj[\"parent\"] === 0);\n  let defaultData = radialData(filteredData, \"root\");\n  console.log(defaultData);\n  drawRadial(defaultData);\n}\n\nfunction radialData(data, rootName) {\n  let radSet = [];\n  data.forEach(obj => {\n    if (obj.name !== rootName) {\n      radSet.push({\n        name: obj.name,\n        value: +obj.numChildren\n      });\n    }\n  });\n  return radSet;\n}","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Draws.js"],"names":["drawNet","drawRadial","netMode","data","layer","filter","obj","defaultNet","netData","defaultLinks","link","map","d","Object","create","defaultNodes","node","rootName","netSet","forEach","push","id","name","group","source","target","value","radialMode","filteredData","defaultData","radialData","console","log","radSet","numChildren"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,UAAjB,QAAkC,UAAlC;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAC1B,MAAIC,KAAK,GAAGD,IAAI,CAACE,MAAL,CAAYC,GAAG,IAAI,CAACA,GAAG,CAAC,QAAD,CAAJ,KAAmB,CAAtC,CAAZ;AACA,MAAIC,UAAU,GAAGC,OAAO,CAACJ,KAAD,EAAQ,MAAR,CAAxB;AACA,QAAMK,YAAY,GAAGF,UAAU,CAACG,IAAX,CAAgBC,GAAhB,CAAoBC,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAcF,CAAd,CAAzB,CAArB;AACA,QAAMG,YAAY,GAAGR,UAAU,CAACS,IAAX,CAAgBL,GAAhB,CAAoBC,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAcF,CAAd,CAAzB,CAArB;AACAZ,EAAAA,OAAO,CAACe,YAAD,EAAeN,YAAf,EAA6BL,KAA7B,EAAoCD,IAApC,EAA0C,MAA1C,CAAP;AACH;;AACD,SAASK,OAAT,CAAiBJ,KAAjB,EAAwBa,QAAxB,EAAkC;AAC9B,MAAIC,MAAM,GAAG;AACTF,IAAAA,IAAI,EAAC,EADI;AAETN,IAAAA,IAAI,EAAC;AAFI,GAAb;AAIAN,EAAAA,KAAK,CAACe,OAAN,CAAcb,GAAG,IAAI;AACjBY,IAAAA,MAAM,CAACF,IAAP,CAAYI,IAAZ,CAAiB;AAACC,MAAAA,EAAE,EAAEf,GAAG,CAACgB,IAAT;AAAeC,MAAAA,KAAK,EAAE,CAACjB,GAAG,CAAC,aAAD;AAA1B,KAAjB;;AACA,QAAIA,GAAG,CAACgB,IAAJ,KAAaL,QAAjB,EAA2B;AACvBC,MAAAA,MAAM,CAACR,IAAP,CAAYU,IAAZ,CAAiB;AAACI,QAAAA,MAAM,EAAEP,QAAT;AAAmBQ,QAAAA,MAAM,EAAEnB,GAAG,CAACgB,IAA/B;AAAqCI,QAAAA,KAAK,EAAE,CAACpB,GAAG,CAAC,aAAD;AAAhD,OAAjB;AACH;AACJ,GALD;AAMA,SAAOY,MAAP;AACH;;AACD,OAAO,SAASS,UAAT,CAAoBxB,IAApB,EAA0B;AAC7B,MAAIyB,YAAY,GAAGzB,IAAI,CAACE,MAAL,CAAYC,GAAG,IAAI,CAACA,GAAG,CAAC,QAAD,CAAJ,KAAmB,CAAtC,CAAnB;AACA,MAAIuB,WAAW,GAAGC,UAAU,CAACF,YAAD,EAAe,MAAf,CAA5B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA5B,EAAAA,UAAU,CAAC4B,WAAD,CAAV;AACH;;AACD,SAASC,UAAT,CAAoB3B,IAApB,EAA0Bc,QAA1B,EAAoC;AAChC,MAAIgB,MAAM,GAAG,EAAb;AACA9B,EAAAA,IAAI,CAACgB,OAAL,CAAab,GAAG,IAAI;AAChB,QAAIA,GAAG,CAACgB,IAAJ,KAAaL,QAAjB,EAA2B;AACvBgB,MAAAA,MAAM,CAACb,IAAP,CAAY;AAACE,QAAAA,IAAI,EAAEhB,GAAG,CAACgB,IAAX;AAAiBI,QAAAA,KAAK,EAAE,CAACpB,GAAG,CAAC4B;AAA7B,OAAZ;AACH;AACJ,GAJD;AAKA,SAAOD,MAAP;AACH","sourcesContent":["import {drawNet, drawRadial} from \"./Helper\";\n\nexport function netMode(data) {\n    let layer = data.filter(obj => +obj[\"parent\"] === 0);\n    let defaultNet = netData(layer, \"root\");\n    const defaultLinks = defaultNet.link.map(d => Object.create(d));\n    const defaultNodes = defaultNet.node.map(d => Object.create(d));\n    drawNet(defaultNodes, defaultLinks, layer, data, \"root\");\n}\nfunction netData(layer, rootName) {\n    let netSet = {\n        node:[],\n        link:[]\n    };\n    layer.forEach(obj => {\n        netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n        if (obj.name !== rootName) {\n            netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n        }\n    });\n    return netSet;\n}\nexport function radialMode(data) {\n    let filteredData = data.filter(obj => +obj[\"parent\"] === 0);\n    let defaultData = radialData(filteredData, \"root\");\n    console.log(defaultData);\n    drawRadial(defaultData);\n}\nfunction radialData(data, rootName) {\n    let radSet = [];\n    data.forEach(obj => {\n        if (obj.name !== rootName) {\n            radSet.push({name: obj.name, value: +obj.numChildren});\n        }\n    });\n    return radSet;\n}"]},"metadata":{},"sourceType":"module"}
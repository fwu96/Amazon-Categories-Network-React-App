{"ast":null,"code":"import * as d3 from 'd3';\nimport $ from \"jquery\";\nexport default function drawNet(nodeSet, linkSet, currLayer, data, rootName) {\n  let simulation = d3.forceSimulation(nodeSet).force(\"link\", d3.forceLink(linkSet).id(d => d.id).strength(0)).force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 2)).force(\"charge\", d3.forceManyBody().strength(-200)).force(\"center\", d3.forceCenter(width / 2, height / 2));\n  let svg = d3.select(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n  let link = svg.append(\"g\").classed(\"links\", true).attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(linkSet).join(\"line\").attr(\"stroke-width\", 1.5);\n  let node = svg.append(\"g\").classed(\"nodes\", true).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\"circle\").data(nodeSet).join(\"circle\").attr(\"r\", d => {\n    if (d.id === rootName) {\n      return 5;\n    }\n\n    if (d.group === 0) {\n      return 3;\n    } else {\n      return Math.sqrt(d.group) * 4;\n    }\n  }).attr(\"fill\", \"#2E86C1\").on(\"click\", function () {\n    $(\".infoBox\").remove();\n    d3.select(this).classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n    let clickedData = currLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n    info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n    let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n    console.log(layer);\n    let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n    console.log(subTreeSet);\n    let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n        linkSet = subTreeSet.link.map(d => Object.create(d));\n    $(\".links\").remove();\n    $(\".nodes\").remove();\n    console.log(\"removed, ready to draw\");\n    drawNet(nodeSet, linkSet, layer, data, clickedData[0][\"name\"]);\n  }).call(drag(simulation));\n  node.append(\"title\").text(d => d.id);\n  simulation.on(\"tick\", () => {\n    link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n    node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n  });\n}\n\nfunction info(clicked, data) {\n  if (clicked) {\n    $(\"#root\").append(\"<div class='infoBox'>\" + \"<h2>Category Information</h2>\" + \"<text>Category Name: \" + data.name + \"</text>\" + \"<text>Category id: \" + data.id + \"</text>\" + \"<text>Number of Products: \" + data.productCount + \"</text>\" + \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" + \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" + \"</div>\");\n  } else {\n    $(\".infoBox\").remove();\n  }\n}\n\nfunction netData(layer, rootName) {\n  let netSet = {\n    node: [],\n    link: []\n  };\n  layer.forEach(obj => {\n    netSet.node.push({\n      id: obj.name,\n      group: +obj[\"numChildren\"]\n    });\n\n    if (obj.name !== rootName) {\n      netSet.link.push({\n        source: rootName,\n        target: obj.name,\n        value: +obj[\"numChildren\"]\n      });\n    }\n  });\n  return netSet;\n}\n\nfunction drag(simulation) {\n  function dragStart(d) {\n    if (!d3.event.active) {\n      simulation.alphaTarget(0.3).restart();\n    }\n\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  function dragged(d) {\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  function dragEnd(d) {\n    if (!d3.event.active) {\n      simulation.alphaTarget(0);\n    }\n\n    d.fx = null;\n    d.fy = null;\n  }\n\n  return d3.drag().on(\"start\", dragStart).on(\"drag\", dragged).on(\"end\", dragEnd);\n}","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Helper.js"],"names":["d3","$","drawNet","nodeSet","linkSet","currLayer","data","rootName","simulation","forceSimulation","force","forceLink","id","d","strength","distance","value","forceManyBody","forceCenter","width","height","svg","select","attr","link","append","classed","selectAll","join","node","group","Math","sqrt","on","remove","clickedData","filter","obj","name","text","info","layer","console","log","subTreeSet","netData","map","Object","create","call","drag","source","x","y","target","clicked","productCount","numChildren","subtreeProductCount","netSet","forEach","push","dragStart","event","active","alphaTarget","restart","fx","fy","dragged","dragEnd"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,IAA9C,EAAoDC,QAApD,EAA8D;AACzE,MAAIC,UAAU,GAAGR,EAAE,CAACS,eAAH,CAAmBN,OAAnB,EACZO,KADY,CACN,MADM,EACEV,EAAE,CAACW,SAAH,CAAaP,OAAb,EAAsBQ,EAAtB,CAAyBC,CAAC,IAAIA,CAAC,CAACD,EAAhC,EAAoCE,QAApC,CAA6C,CAA7C,CADF,EAEZJ,KAFY,CAEN,MAFM,EAEEV,EAAE,CAACW,SAAH,CAAaP,OAAb,EAAsBW,QAAtB,CAA+BF,CAAC,IAAIA,CAAC,CAACG,KAAF,GAAU,CAA9C,CAFF,EAGZN,KAHY,CAGN,QAHM,EAGIV,EAAE,CAACiB,aAAH,GAAmBH,QAAnB,CAA4B,CAAC,GAA7B,CAHJ,EAIZJ,KAJY,CAIN,QAJM,EAIIV,EAAE,CAACkB,WAAH,CAAeC,KAAK,GAAG,CAAvB,EAA0BC,MAAM,GAAG,CAAnC,CAJJ,CAAjB;AAKA,MAAIC,GAAG,GAAGrB,EAAE,CAACsB,MAAH,CAAU,KAAV,EACLC,IADK,CACA,SADA,EACW,CAAC,CAAD,EAAI,CAAJ,EAAOJ,KAAP,EAAcC,MAAd,CADX,CAAV;AAEA,MAAII,IAAI,GAAGH,GAAG,CAACI,MAAJ,CAAW,GAAX,EACNC,OADM,CACE,OADF,EACW,IADX,EAENH,IAFM,CAED,QAFC,EAES,MAFT,EAGNA,IAHM,CAGD,gBAHC,EAGiB,GAHjB,EAINI,SAJM,CAII,MAJJ,EAKNrB,IALM,CAKDF,OALC,EAMNwB,IANM,CAMD,MANC,EAONL,IAPM,CAOD,cAPC,EAOe,GAPf,CAAX;AAQA,MAAIM,IAAI,GAAGR,GAAG,CAACI,MAAJ,CAAW,GAAX,EACNC,OADM,CACE,OADF,EACW,IADX,EAENH,IAFM,CAED,QAFC,EAES,MAFT,EAGNA,IAHM,CAGD,cAHC,EAGe,GAHf,EAINI,SAJM,CAII,QAJJ,EAKNrB,IALM,CAKDH,OALC,EAMNyB,IANM,CAMD,QANC,EAONL,IAPM,CAOD,GAPC,EAOIV,CAAC,IAAI;AACZ,QAAIA,CAAC,CAACD,EAAF,KAASL,QAAb,EAAuB;AACnB,aAAO,CAAP;AACH;;AACD,QAAIM,CAAC,CAACiB,KAAF,KAAY,CAAhB,EAAmB;AACf,aAAO,CAAP;AACH,KAFD,MAEO;AACH,aAAOC,IAAI,CAACC,IAAL,CAAUnB,CAAC,CAACiB,KAAZ,IAAqB,CAA5B;AACH;AACJ,GAhBM,EAiBNP,IAjBM,CAiBD,MAjBC,EAiBO,SAjBP,EAkBNU,EAlBM,CAkBH,OAlBG,EAkBM,YAAW;AACpBhC,IAAAA,CAAC,CAAC,UAAD,CAAD,CAAciC,MAAd;AACAlC,IAAAA,EAAE,CAACsB,MAAH,CAAU,IAAV,EACKI,OADL,CACa,SADb,EACwB,CAAC1B,EAAE,CAACsB,MAAH,CAAU,IAAV,EAAgBI,OAAhB,CAAwB,SAAxB,CADzB;AAEA,QAAIS,WAAW,GAAG9B,SAAS,CAAC+B,MAAV,CAAiBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAatC,EAAE,CAACsB,MAAH,CAAU,IAAV,EAAgBA,MAAhB,CAAuB,OAAvB,EAAgCiB,IAAhC,EAArC,CAAlB;AACAC,IAAAA,IAAI,CAACxC,EAAE,CAACsB,MAAH,CAAU,IAAV,EAAgBI,OAAhB,CAAwB,SAAxB,CAAD,EAAqCS,WAAW,CAAC,CAAD,CAAhD,CAAJ;AACA,QAAIM,KAAK,GAAGnC,IAAI,CAAC8B,MAAL,CAAYC,GAAG,IAAIA,GAAG,CAAC,QAAD,CAAH,KAAkBF,WAAW,CAAC,CAAD,CAAX,CAAe,IAAf,CAAlB,IAA0CE,GAAG,CAAC,MAAD,CAAH,KAAgBF,WAAW,CAAC,CAAD,CAAX,CAAe,MAAf,CAA7E,CAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAIG,UAAU,GAAGC,OAAO,CAACJ,KAAD,EAAQN,WAAW,CAAC,CAAD,CAAX,CAAe,MAAf,CAAR,CAAxB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACA,QAAIzC,OAAO,GAAGyC,UAAU,CAACf,IAAX,CAAgBiB,GAAhB,CAAoBjC,CAAC,IAAIkC,MAAM,CAACC,MAAP,CAAcnC,CAAd,CAAzB,CAAd;AAAA,QACIT,OAAO,GAAGwC,UAAU,CAACpB,IAAX,CAAgBsB,GAAhB,CAAoBjC,CAAC,IAAIkC,MAAM,CAACC,MAAP,CAAcnC,CAAd,CAAzB,CADd;AAEAZ,IAAAA,CAAC,CAAC,QAAD,CAAD,CAAYiC,MAAZ;AACAjC,IAAAA,CAAC,CAAC,QAAD,CAAD,CAAYiC,MAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAzC,IAAAA,OAAO,CAACC,OAAD,EAAUC,OAAV,EAAmBqC,KAAnB,EAA0BnC,IAA1B,EAAgC6B,WAAW,CAAC,CAAD,CAAX,CAAe,MAAf,CAAhC,CAAP;AACH,GAlCM,EAmCNc,IAnCM,CAmCDC,IAAI,CAAC1C,UAAD,CAnCH,CAAX;AAoCAqB,EAAAA,IAAI,CAACJ,MAAL,CAAY,OAAZ,EACKc,IADL,CACU1B,CAAC,IAAIA,CAAC,CAACD,EADjB;AAEAJ,EAAAA,UAAU,CAACyB,EAAX,CAAc,MAAd,EAAsB,MAAM;AACxBT,IAAAA,IAAI,CACCD,IADL,CACU,IADV,EACgBV,CAAC,IAAIA,CAAC,CAACsC,MAAF,CAASC,CAD9B,EAEK7B,IAFL,CAEU,IAFV,EAEgBV,CAAC,IAAIA,CAAC,CAACsC,MAAF,CAASE,CAF9B,EAGK9B,IAHL,CAGU,IAHV,EAGgBV,CAAC,IAAIA,CAAC,CAACyC,MAAF,CAASF,CAH9B,EAIK7B,IAJL,CAIU,IAJV,EAIgBV,CAAC,IAAIA,CAAC,CAACyC,MAAF,CAASD,CAJ9B;AAKAxB,IAAAA,IAAI,CACCN,IADL,CACU,IADV,EACgBV,CAAC,IAAIA,CAAC,CAACuC,CADvB,EAEK7B,IAFL,CAEU,IAFV,EAEgBV,CAAC,IAAIA,CAAC,CAACwC,CAFvB;AAGH,GATD;AAUH;;AACD,SAASb,IAAT,CAAce,OAAd,EAAuBjD,IAAvB,EAA6B;AACzB,MAAIiD,OAAJ,EAAa;AACTtD,IAAAA,CAAC,CAAC,OAAD,CAAD,CAAWwB,MAAX,CACI,0BACA,+BADA,GAEA,uBAFA,GAE0BnB,IAAI,CAACgC,IAF/B,GAEsC,SAFtC,GAGA,qBAHA,GAGwBhC,IAAI,CAACM,EAH7B,GAGkC,SAHlC,GAIA,4BAJA,GAI+BN,IAAI,CAACkD,YAJpC,GAImD,SAJnD,GAKA,4BALA,GAK+BlD,IAAI,CAACmD,WALpC,GAKkD,SALlD,GAMA,uCANA,GAM0CnD,IAAI,CAACoD,mBAN/C,GAMqE,SANrE,GAOA,QARJ;AASH,GAVD,MAUO;AACHzD,IAAAA,CAAC,CAAC,UAAD,CAAD,CAAciC,MAAd;AACH;AACJ;;AACD,SAASW,OAAT,CAAiBJ,KAAjB,EAAwBlC,QAAxB,EAAkC;AAC9B,MAAIoD,MAAM,GAAG;AACT9B,IAAAA,IAAI,EAAC,EADI;AAETL,IAAAA,IAAI,EAAC;AAFI,GAAb;AAIAiB,EAAAA,KAAK,CAACmB,OAAN,CAAcvB,GAAG,IAAI;AACjBsB,IAAAA,MAAM,CAAC9B,IAAP,CAAYgC,IAAZ,CAAiB;AAACjD,MAAAA,EAAE,EAAEyB,GAAG,CAACC,IAAT;AAAeR,MAAAA,KAAK,EAAE,CAACO,GAAG,CAAC,aAAD;AAA1B,KAAjB;;AACA,QAAIA,GAAG,CAACC,IAAJ,KAAa/B,QAAjB,EAA2B;AACvBoD,MAAAA,MAAM,CAACnC,IAAP,CAAYqC,IAAZ,CAAiB;AAACV,QAAAA,MAAM,EAAE5C,QAAT;AAAmB+C,QAAAA,MAAM,EAAEjB,GAAG,CAACC,IAA/B;AAAqCtB,QAAAA,KAAK,EAAE,CAACqB,GAAG,CAAC,aAAD;AAAhD,OAAjB;AACH;AACJ,GALD;AAMA,SAAOsB,MAAP;AACH;;AACD,SAAST,IAAT,CAAc1C,UAAd,EAA0B;AACtB,WAASsD,SAAT,CAAmBjD,CAAnB,EAAsB;AAClB,QAAI,CAACb,EAAE,CAAC+D,KAAH,CAASC,MAAd,EAAsB;AAClBxD,MAAAA,UAAU,CAACyD,WAAX,CAAuB,GAAvB,EAA4BC,OAA5B;AACH;;AACDrD,IAAAA,CAAC,CAACsD,EAAF,GAAOtD,CAAC,CAACuC,CAAT;AACAvC,IAAAA,CAAC,CAACuD,EAAF,GAAOvD,CAAC,CAACwC,CAAT;AACH;;AACD,WAASgB,OAAT,CAAiBxD,CAAjB,EAAoB;AAChBA,IAAAA,CAAC,CAACsD,EAAF,GAAOnE,EAAE,CAAC+D,KAAH,CAASX,CAAhB;AACAvC,IAAAA,CAAC,CAACuD,EAAF,GAAOpE,EAAE,CAAC+D,KAAH,CAASV,CAAhB;AACH;;AACD,WAASiB,OAAT,CAAiBzD,CAAjB,EAAoB;AAChB,QAAI,CAACb,EAAE,CAAC+D,KAAH,CAASC,MAAd,EAAsB;AAClBxD,MAAAA,UAAU,CAACyD,WAAX,CAAuB,CAAvB;AACH;;AACDpD,IAAAA,CAAC,CAACsD,EAAF,GAAO,IAAP;AACAtD,IAAAA,CAAC,CAACuD,EAAF,GAAO,IAAP;AACH;;AACD,SAAOpE,EAAE,CAACkD,IAAH,GACFjB,EADE,CACC,OADD,EACU6B,SADV,EAEF7B,EAFE,CAEC,MAFD,EAESoC,OAFT,EAGFpC,EAHE,CAGC,KAHD,EAGQqC,OAHR,CAAP;AAIH","sourcesContent":["import * as d3 from 'd3';\nimport $ from \"jquery\";\n\nexport default function drawNet(nodeSet, linkSet, currLayer, data, rootName) {\n    let simulation = d3.forceSimulation(nodeSet)\n        .force(\"link\", d3.forceLink(linkSet).id(d => d.id).strength(0))\n        .force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 2))\n        .force(\"charge\", d3.forceManyBody().strength(-200))\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n    let svg = d3.select(\"svg\")\n        .attr(\"viewBox\", [0, 0, width, height]);\n    let link = svg.append(\"g\")\n        .classed(\"links\", true)\n        .attr(\"stroke\", \"#999\")\n        .attr(\"stroke-opacity\", 0.6)\n        .selectAll(\"line\")\n        .data(linkSet)\n        .join(\"line\")\n        .attr(\"stroke-width\", 1.5);\n    let node = svg.append(\"g\")\n        .classed(\"nodes\", true)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 1.5)\n        .selectAll(\"circle\")\n        .data(nodeSet)\n        .join(\"circle\")\n        .attr(\"r\", d => {\n            if (d.id === rootName) {\n                return 5;\n            }\n            if (d.group === 0) {\n                return 3;\n            } else {\n                return Math.sqrt(d.group) * 4;\n            }\n        })\n        .attr(\"fill\", \"#2E86C1\")\n        .on(\"click\", function() {\n            $(\".infoBox\").remove();\n            d3.select(this)\n                .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n            let clickedData = currLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n            info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n            let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n            console.log(layer);\n            let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n            console.log(subTreeSet);\n            let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n                linkSet = subTreeSet.link.map(d => Object.create(d));\n            $(\".links\").remove();\n            $(\".nodes\").remove();\n            console.log(\"removed, ready to draw\");\n            drawNet(nodeSet, linkSet, layer, data, clickedData[0][\"name\"]);\n        })\n        .call(drag(simulation));\n    node.append(\"title\")\n        .text(d => d.id);\n    simulation.on(\"tick\", () => {\n        link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n        node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n    });\n}\nfunction info(clicked, data) {\n    if (clicked) {\n        $(\"#root\").append(\n            \"<div class='infoBox'>\" +\n            \"<h2>Category Information</h2>\" +\n            \"<text>Category Name: \" + data.name + \"</text>\" +\n            \"<text>Category id: \" + data.id + \"</text>\" +\n            \"<text>Number of Products: \" + data.productCount + \"</text>\" +\n            \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" +\n            \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" +\n            \"</div>\");\n    } else {\n        $(\".infoBox\").remove();\n    }\n}\nfunction netData(layer, rootName) {\n    let netSet = {\n        node:[],\n        link:[]\n    };\n    layer.forEach(obj => {\n        netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n        if (obj.name !== rootName) {\n            netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n        }\n    });\n    return netSet;\n}\nfunction drag(simulation) {\n    function dragStart(d) {\n        if (!d3.event.active) {\n            simulation.alphaTarget(0.3).restart();\n        }\n        d.fx = d.x;\n        d.fy = d.y;\n    }\n    function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n    }\n    function dragEnd(d) {\n        if (!d3.event.active) {\n            simulation.alphaTarget(0);\n        }\n        d.fx = null;\n        d.fy = null;\n    }\n    return d3.drag()\n        .on(\"start\", dragStart)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragEnd);\n}"]},"metadata":{},"sourceType":"module"}
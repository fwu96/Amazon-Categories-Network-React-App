{"ast":null,"code":"var _jsxFileName = \"/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Network.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n  render() {\n    const width = 1500;\n    const height = 800;\n\n    function info(clicked, data) {\n      if (clicked) {\n        $(\"#root\").append(\"<div class='infoBox'>\" + \"<h2>Category Information</h2>\" + \"<text>Category Name: \" + data.name + \"</text>\" + \"<text>Category id: \" + data.id + \"</text>\" + \"<text>Number of Products: \" + data.productCount + \"</text>\" + \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" + \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" + \"</div>\");\n      } else {\n        $(\".infoBox\").remove();\n      }\n    }\n\n    function color() {\n      const scale = d3.scaleOrdinal(d3.schemeCategory10);\n      return d => scale(d.group);\n    }\n\n    function drag(simulation) {\n      function dragStart(d) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0.3).restart();\n        }\n\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragEnd(d) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0);\n        }\n\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3.drag().on(\"start\", dragStart).on(\"drag\", dragged).on(\"end\", dragEnd);\n    }\n\n    function draw(nodeSet, linkSet, layer) {\n      let simulation = d3.forceSimulation(nodeSet).force(\"link\", d3.forceLink(linkSet).id(d => d.id)).force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 1.5)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n      let svg = d3.select(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n      let link = svg.append(\"g\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(linkSet).join(\"line\").attr(\"stroke-width\", 1.5);\n      let node = svg.append(\"g\").attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\"circle\").data(nodeSet).join(\"circle\").attr(\"r\", d => Math.sqrt(d.group) * 1.5).attr(\"fill\", \"#2E86C1\") // .on(\"click\", function() {\n      //     $(\".infoBox\").remove();\n      //     d3.select(this)\n      //         .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n      //     let clickedData = layer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n      //     info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n      // })\n      .call(drag(simulation));\n      node.append(\"title\").text(d => d.id);\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      });\n    }\n\n    function netData(layer, rootName) {\n      let netSet = {\n        node: [],\n        link: []\n      };\n      layer.forEach(obj => {\n        netSet.node.push({\n          id: obj.name,\n          group: +obj[\"numChildren\"]\n        });\n\n        if (obj.name !== rootName) {\n          netSet.link.push({\n            source: rootName,\n            target: obj.name,\n            value: +obj[\"numChildren\"]\n          });\n        }\n      });\n      return netSet;\n    }\n\n    d3.csv(\"./all-nodes.csv\").then(data => {\n      console.log(data);\n      let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n      console.log(firstLayer); // let defaultNet = {\n      //     node:[],\n      //     link:[]\n      // };\n      // firstLayer.forEach(obj => {\n      //     defaultNet.node.push({id: obj.name, group: +obj.numChildren});\n      //     if (obj.name !== \"root\") {\n      //         defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n      //     }\n      // });\n\n      let defaultNet = netData(firstLayer, \"root\");\n      console.log(defaultNet);\n      const defaultLinks = defaultNet.link.map(d => Object.create(d));\n      const defaultNodes = defaultNet.node.map(d => Object.create(d)); // draw(defaultNodes, defaultLinks, firstLayer);\n\n      const simulation = d3.forceSimulation(defaultNodes).force(\"link\", d3.forceLink(defaultLinks).id(d => d.id)).force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n      const svg = d3.select(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n      const link = svg.append(\"g\").classed(\"links\", true).attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(defaultLinks).join(\"line\").attr(\"stroke-width\", 1.5);\n      const node = svg.append(\"g\").classed(\"nodes\", true).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\"circle\").data(defaultNodes).join(\"circle\").attr(\"r\", d => Math.sqrt(d.group) * 1.5).attr(\"fill\", \"#2E86C1\").on(\"click\", function () {\n        $(\".infoBox\").remove();\n        d3.select(this).classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n        let clickedData = firstLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n        info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n        console.log(clickedData[0]);\n        let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n        console.log(layer);\n        let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n        console.log(subTreeSet);\n        let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n            linkSet = subTreeSet.link.map(d => Object.create(d));\n        $(\".links\").remove();\n        $(\".nodes\").remove();\n        console.log(\"removed, ready to draw\");\n        draw(nodeSet, linkSet, layer);\n      }).call(drag(simulation));\n      node.append(\"title\").text(d => d.id);\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      });\n    });\n    return React.createElement(\"svg\", {\n      className: \"Net\",\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Network;","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Network.js"],"names":["React","Component","d3","$","Network","render","width","height","info","clicked","data","append","name","id","productCount","numChildren","subtreeProductCount","remove","color","scale","scaleOrdinal","schemeCategory10","d","group","drag","simulation","dragStart","event","active","alphaTarget","restart","fx","x","fy","y","dragged","dragEnd","on","draw","nodeSet","linkSet","layer","forceSimulation","force","forceLink","distance","value","forceManyBody","forceCenter","svg","select","attr","link","selectAll","join","node","Math","sqrt","call","text","source","target","netData","rootName","netSet","forEach","obj","push","csv","then","console","log","firstLayer","filter","defaultNet","defaultLinks","map","Object","create","defaultNodes","classed","clickedData","subTreeSet"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n    render() {\n        const width = 1500;\n        const height = 800;\n        function info(clicked, data) {\n            if (clicked) {\n                $(\"#root\").append(\n                    \"<div class='infoBox'>\" +\n                        \"<h2>Category Information</h2>\" +\n                        \"<text>Category Name: \" + data.name + \"</text>\" +\n                        \"<text>Category id: \" + data.id + \"</text>\" +\n                        \"<text>Number of Products: \" + data.productCount + \"</text>\" +\n                        \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" +\n                        \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" +\n                    \"</div>\");\n            } else {\n                $(\".infoBox\").remove();\n            }\n        }\n        function color() {\n            const scale = d3.scaleOrdinal(d3.schemeCategory10);\n            return d => scale(d.group);\n        }\n        function drag(simulation) {\n            function dragStart(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            }\n            function dragged(d) {\n                d.fx = d3.event.x;\n                d.fy = d3.event.y;\n            }\n            function dragEnd(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = null;\n                d.fy = null;\n            }\n            return d3.drag()\n                .on(\"start\", dragStart)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragEnd);\n        }\n        function draw(nodeSet, linkSet, layer) {\n            let simulation = d3.forceSimulation(nodeSet)\n                .force(\"link\", d3.forceLink(linkSet).id(d => d.id))\n                .force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 1.5))\n                .force(\"charge\", d3.forceManyBody())\n                .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            let svg = d3.select(\"svg\")\n                .attr(\"viewBox\", [0, 0, width, height]);\n            let link = svg.append(\"g\")\n                .attr(\"stroke\", \"#999\")\n                .attr(\"stroke-opacity\", 0.6)\n                .selectAll(\"line\")\n                .data(linkSet)\n                .join(\"line\")\n                .attr(\"stroke-width\", 1.5);\n            let node = svg.append(\"g\")\n                .attr(\"stroke\", \"#fff\")\n                .attr(\"stroke-width\", 1.5)\n                .selectAll(\"circle\")\n                .data(nodeSet)\n                .join(\"circle\")\n                .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n                .attr(\"fill\", \"#2E86C1\")\n                // .on(\"click\", function() {\n                //     $(\".infoBox\").remove();\n                //     d3.select(this)\n                //         .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n                //     let clickedData = layer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n                //     info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n                // })\n                .call(drag(simulation));\n            node.append(\"title\")\n                .text(d => d.id);\n            simulation.on(\"tick\", () => {\n                link\n                    .attr(\"x1\", d => d.source.x)\n                    .attr(\"y1\", d => d.source.y)\n                    .attr(\"x2\", d => d.target.x)\n                    .attr(\"y2\", d => d.target.y);\n                node\n                    .attr(\"cx\", d => d.x)\n                    .attr(\"cy\", d => d.y);\n            });\n        }\n        function netData(layer, rootName) {\n            let netSet = {\n                node:[],\n                link:[]\n            };\n            layer.forEach(obj => {\n                netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n                if (obj.name !== rootName) {\n                    netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n                }\n            });\n            return netSet;\n        }\n        d3.csv(\"./all-nodes.csv\").then(data => {\n            console.log(data);\n            let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n            console.log(firstLayer);\n            // let defaultNet = {\n            //     node:[],\n            //     link:[]\n            // };\n            // firstLayer.forEach(obj => {\n            //     defaultNet.node.push({id: obj.name, group: +obj.numChildren});\n            //     if (obj.name !== \"root\") {\n            //         defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n            //     }\n            // });\n            let defaultNet = netData(firstLayer, \"root\");\n            console.log(defaultNet);\n            const defaultLinks = defaultNet.link.map(d => Object.create(d));\n            const defaultNodes = defaultNet.node.map(d => Object.create(d));\n            // draw(defaultNodes, defaultLinks, firstLayer);\n            const simulation = d3.forceSimulation(defaultNodes)\n                .force(\"link\", d3.forceLink(defaultLinks).id(d => d.id))\n                .force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5))\n                .force(\"charge\", d3.forceManyBody())\n                .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            const svg = d3.select(\"svg\")\n                .attr(\"viewBox\", [0, 0, width, height]);\n            const link = svg.append(\"g\")\n                .classed(\"links\", true)\n                .attr(\"stroke\", \"#999\")\n                .attr(\"stroke-opacity\", 0.6)\n                .selectAll(\"line\")\n                .data(defaultLinks)\n                .join(\"line\")\n                .attr(\"stroke-width\", 1.5);\n            const node = svg.append(\"g\")\n                .classed(\"nodes\", true)\n                .attr(\"stroke\", \"#fff\")\n                .attr(\"stroke-width\", 1.5)\n                .selectAll(\"circle\")\n                .data(defaultNodes)\n                .join(\"circle\")\n                .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n                .attr(\"fill\", \"#2E86C1\")\n                .on(\"click\", function() {\n                    $(\".infoBox\").remove();\n                    d3.select(this)\n                        .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n                    let clickedData = firstLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n                    info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n                    console.log(clickedData[0]);\n\n                    let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n                    console.log(layer);\n                    let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n                    console.log(subTreeSet);\n                    let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n                        linkSet = subTreeSet.link.map(d => Object.create(d));\n                    $(\".links\").remove();\n                    $(\".nodes\").remove();\n                    console.log(\"removed, ready to draw\");\n                    draw(nodeSet, linkSet, layer);\n                })\n                .call(drag(simulation));\n            node.append(\"title\")\n                .text(d => d.id);\n            simulation.on(\"tick\", () => {\n                link\n                    .attr(\"x1\", d => d.source.x)\n                    .attr(\"y1\", d => d.source.y)\n                    .attr(\"x2\", d => d.target.x)\n                    .attr(\"y2\", d => d.target.y);\n                node\n                    .attr(\"cx\", d => d.x)\n                    .attr(\"cy\", d => d.y);\n            });\n        });\n        return (\n            <svg className=\"Net\" width={width} height={height}/>\n        )\n    }\n}\nexport default Network;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Network.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n  render() {\n    const width = 1500;\n    const height = 800;\n\n    function info(clicked) {\n      if (clicked) {\n        $(\"#root\").append(\"<div></div>\").attr(\"\").append(\"h2\").text(\"Category Information\");\n      } else {\n        $(\".infoBox\").remove();\n      }\n    }\n\n    function color() {\n      const scale = d3.scaleOrdinal(d3.schemeCategory10);\n      return d => scale(d.group);\n    }\n\n    function drag(simulation) {\n      function dragStart(d) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0.3).restart();\n        }\n\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragEnd(d) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0);\n        }\n\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3.drag().on(\"start\", dragStart).on(\"drag\", dragged).on(\"end\", dragEnd);\n    }\n\n    d3.csv(\"./all-nodes.csv\").then(data => {\n      console.log(data);\n      let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n      console.log(firstLayer);\n      let defaultNet = {\n        node: [],\n        link: []\n      };\n      firstLayer.forEach(obj => {\n        defaultNet.node.push({\n          id: obj.name,\n          group: +obj.numChildren\n        });\n\n        if (obj.name !== \"root\") {\n          defaultNet.link.push({\n            source: \"root\",\n            target: obj.name,\n            value: +obj.numChildren\n          });\n        }\n      });\n      console.log(defaultNet);\n      const defaultLinks = defaultNet.link.map(d => Object.create(d));\n      const defaultNodes = defaultNet.node.map(d => Object.create(d));\n      const simulation = d3.forceSimulation(defaultNodes).force(\"link\", d3.forceLink(defaultLinks).id(d => d.id)).force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n      const svg = d3.select(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n      const link = svg.append(\"g\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(defaultLinks).join(\"line\").attr(\"stroke-width\", 1.5);\n      const node = svg.append(\"g\").attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\"circle\").data(defaultNodes).join(\"circle\").attr(\"r\", d => Math.sqrt(d.group) * 1.5).attr(\"fill\", color).on(\"click\", function () {\n        d3.select(this).classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n        info(d3.select(this).classed(\"clicked\")); // if (d3.select(this).classed(\"clicked\")) {\n        // d3.select(\"#root\")\n        //     .append(\"div\")\n        //     .classed(\"infoBox\", true)\n        //     .append(\"h2\")\n        //     .text(\"Category Information\");\n        // } else {\n        //     d3.select(\".infoBox\")\n        //         .remove();\n        // }\n        // if (d3.select(this).classed(\"clicked\")) {\n        //     console.log(\"clicked\");\n        // } else {\n        //     console.log(\"unclicked\");\n        // }\n      }).call(drag(simulation));\n      node.append(\"title\").text(d => d.id);\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      });\n    });\n    return React.createElement(\"svg\", {\n      className: \"Net\",\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Network;","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/category-network/src/Network.js"],"names":["React","Component","d3","$","Network","render","width","height","info","clicked","append","attr","text","remove","color","scale","scaleOrdinal","schemeCategory10","d","group","drag","simulation","dragStart","event","active","alphaTarget","restart","fx","x","fy","y","dragged","dragEnd","on","csv","then","data","console","log","firstLayer","filter","obj","defaultNet","node","link","forEach","push","id","name","numChildren","source","target","value","defaultLinks","map","Object","create","defaultNodes","forceSimulation","force","forceLink","distance","forceManyBody","forceCenter","svg","select","selectAll","join","Math","sqrt","classed","call"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n    render() {\n        const width = 1500;\n        const height = 800;\n        function info(clicked) {\n            if (clicked) {\n                $(\"#root\")\n                    .append(\"<div></div>\")\n                    .attr(\"\")\n                    .append(\"h2\")\n                    .text(\"Category Information\");\n            } else {\n                $(\".infoBox\")\n                    .remove();\n            }\n        }\n        function color() {\n            const scale = d3.scaleOrdinal(d3.schemeCategory10);\n            return d => scale(d.group);\n        }\n        function drag(simulation) {\n            function dragStart(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            }\n            function dragged(d) {\n                d.fx = d3.event.x;\n                d.fy = d3.event.y;\n            }\n            function dragEnd(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = null;\n                d.fy = null;\n            }\n            return d3.drag()\n                .on(\"start\", dragStart)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragEnd);\n        }\n        d3.csv(\"./all-nodes.csv\").then(data => {\n            console.log(data);\n            let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n            console.log(firstLayer);\n            let defaultNet = {\n                node:[],\n                link:[]\n            };\n            firstLayer.forEach(obj => {\n                defaultNet.node.push({id: obj.name, group: +obj.numChildren});\n                if (obj.name !== \"root\") {\n                    defaultNet.link.push({source: \"root\", target: obj.name, value: +obj.numChildren});\n                }\n            });\n            console.log(defaultNet);\n            const defaultLinks = defaultNet.link.map(d => Object.create(d));\n            const defaultNodes = defaultNet.node.map(d => Object.create(d));\n            const simulation = d3.forceSimulation(defaultNodes)\n                .force(\"link\", d3.forceLink(defaultLinks).id(d => d.id))\n                .force(\"link\", d3.forceLink(defaultLinks).distance(d => d.value * 1.5))\n                .force(\"charge\", d3.forceManyBody())\n                .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            const svg = d3.select(\"svg\")\n                .attr(\"viewBox\", [0, 0, width, height]);\n            const link = svg.append(\"g\")\n                .attr(\"stroke\", \"#999\")\n                .attr(\"stroke-opacity\", 0.6)\n                .selectAll(\"line\")\n                .data(defaultLinks)\n                .join(\"line\")\n                .attr(\"stroke-width\", 1.5);\n            const node = svg.append(\"g\")\n                .attr(\"stroke\", \"#fff\")\n                .attr(\"stroke-width\", 1.5)\n                .selectAll(\"circle\")\n                .data(defaultNodes)\n                .join(\"circle\")\n                .attr(\"r\", d => Math.sqrt(d.group) * 1.5)\n                .attr(\"fill\", color)\n                .on(\"click\", function() {\n                    d3.select(this)\n                        .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n                    info(d3.select(this).classed(\"clicked\"));\n                    // if (d3.select(this).classed(\"clicked\")) {\n                    // d3.select(\"#root\")\n                    //     .append(\"div\")\n                    //     .classed(\"infoBox\", true)\n                    //     .append(\"h2\")\n                    //     .text(\"Category Information\");\n                    // } else {\n                    //     d3.select(\".infoBox\")\n                    //         .remove();\n                    // }\n                    // if (d3.select(this).classed(\"clicked\")) {\n                    //     console.log(\"clicked\");\n                    // } else {\n                    //     console.log(\"unclicked\");\n                    // }\n                })\n                .call(drag(simulation));\n            node.append(\"title\")\n                .text(d => d.id);\n            simulation.on(\"tick\", () => {\n                link\n                    .attr(\"x1\", d => d.source.x)\n                    .attr(\"y1\", d => d.source.y)\n                    .attr(\"x2\", d => d.target.x)\n                    .attr(\"y2\", d => d.target.y);\n                node\n                    .attr(\"cx\", d => d.x)\n                    .attr(\"cy\", d => d.y);\n            });\n        });\n        return (\n            <svg className=\"Net\" width={width} height={height}/>\n        )\n    }\n}\nexport default Network;"]},"metadata":{},"sourceType":"module"}
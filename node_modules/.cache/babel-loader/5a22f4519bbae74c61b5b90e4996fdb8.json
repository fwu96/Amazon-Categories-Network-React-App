{"ast":null,"code":"var _jsxFileName = \"/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Network.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n  render() {\n    const width = 1500;\n    const height = 800;\n\n    function info(clicked, data) {\n      if (clicked) {\n        $(\"#root\").append(\"<div class='infoBox'>\" + \"<h2>Category Information</h2>\" + \"<text>Category Name: \" + data.name + \"</text>\" + \"<text>Category id: \" + data.id + \"</text>\" + \"<text>Number of Products: \" + data.productCount + \"</text>\" + \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" + \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" + \"</div>\");\n      } else {\n        $(\".infoBox\").remove();\n      }\n    }\n\n    function color() {\n      const scale = d3.scaleOrdinal(d3.schemeCategory10);\n      return d => scale(d.group);\n    }\n\n    function radius(data) {\n      return d3.scaleLinear().domain(data.map(obj => obj.group)).range([10, 60]);\n    }\n\n    function drag(simulation) {\n      function dragStart(d) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0.3).restart();\n        }\n\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragEnd(d) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0);\n        }\n\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3.drag().on(\"start\", dragStart).on(\"drag\", dragged).on(\"end\", dragEnd);\n    }\n\n    function draw(nodeSet, linkSet, currLayer, data) {\n      let simulation = d3.forceSimulation(nodeSet).force(\"link\", d3.forceLink(linkSet).id(d => d.id).strength(0)).force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 2)).force(\"charge\", d3.forceManyBody().strength(-200)).force(\"center\", d3.forceCenter(width / 2, height / 2));\n      let svg = d3.select(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n      let link = svg.append(\"g\").classed(\"links\", true).attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(linkSet).join(\"line\").attr(\"stroke-width\", 1.5);\n      let node = svg.append(\"g\").classed(\"nodes\", true).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\"circle\").data(nodeSet).join(\"circle\").attr(\"r\", d => Math.sqrt(d.group) * 2).attr(\"fill\", \"#2E86C1\").on(\"click\", function () {\n        $(\".infoBox\").remove();\n        d3.select(this).classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n        let clickedData = currLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n        info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n        let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n        console.log(layer);\n        let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n        console.log(subTreeSet);\n        let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n            linkSet = subTreeSet.link.map(d => Object.create(d));\n        $(\".links\").remove();\n        $(\".nodes\").remove();\n        console.log(\"removed, ready to draw\");\n        draw(nodeSet, linkSet, layer, data);\n      }).call(drag(simulation));\n      node.append(\"title\").text(d => d.id);\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      });\n    }\n\n    function netData(layer, rootName) {\n      let netSet = {\n        node: [],\n        link: []\n      };\n      layer.forEach(obj => {\n        netSet.node.push({\n          id: obj.name,\n          group: +obj[\"numChildren\"]\n        });\n\n        if (obj.name !== rootName) {\n          netSet.link.push({\n            source: rootName,\n            target: obj.name,\n            value: +obj[\"numChildren\"]\n          });\n        }\n      });\n      return netSet;\n    }\n\n    d3.csv(\"./all-nodes.csv\").then(data => {\n      console.log(data);\n      let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n      console.log(firstLayer);\n      let defaultNet = netData(firstLayer, \"root\");\n      console.log(defaultNet);\n      const defaultLinks = defaultNet.link.map(d => Object.create(d));\n      const defaultNodes = defaultNet.node.map(d => Object.create(d));\n      draw(defaultNodes, defaultLinks, firstLayer, data);\n    });\n    return React.createElement(\"svg\", {\n      className: \"Net\",\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Network;","map":{"version":3,"sources":["/Users/Fwu/Documents/Acd.2019-2020/CS765/Design Challenge/DC3/Amazon-Categories-Network-React-App/src/Network.js"],"names":["React","Component","d3","$","Network","render","width","height","info","clicked","data","append","name","id","productCount","numChildren","subtreeProductCount","remove","color","scale","scaleOrdinal","schemeCategory10","d","group","radius","scaleLinear","domain","map","obj","range","drag","simulation","dragStart","event","active","alphaTarget","restart","fx","x","fy","y","dragged","dragEnd","on","draw","nodeSet","linkSet","currLayer","forceSimulation","force","forceLink","strength","distance","value","forceManyBody","forceCenter","svg","select","attr","link","classed","selectAll","join","node","Math","sqrt","clickedData","filter","text","layer","console","log","subTreeSet","netData","Object","create","call","source","target","rootName","netSet","forEach","push","csv","then","firstLayer","defaultNet","defaultLinks","defaultNodes"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nimport \"./InfoBox.css\";\nimport \"./Network.css\";\n\nclass Network extends Component {\n    render() {\n        const width = 1500;\n        const height = 800;\n        function info(clicked, data) {\n            if (clicked) {\n                $(\"#root\").append(\n                    \"<div class='infoBox'>\" +\n                        \"<h2>Category Information</h2>\" +\n                        \"<text>Category Name: \" + data.name + \"</text>\" +\n                        \"<text>Category id: \" + data.id + \"</text>\" +\n                        \"<text>Number of Products: \" + data.productCount + \"</text>\" +\n                        \"<text>Number of Subtrees: \" + data.numChildren + \"</text>\" +\n                        \"<text>Number of Products in Subtree: \" + data.subtreeProductCount + \"</text>\" +\n                    \"</div>\");\n            } else {\n                $(\".infoBox\").remove();\n            }\n        }\n        function color() {\n            const scale = d3.scaleOrdinal(d3.schemeCategory10);\n            return d => scale(d.group);\n        }\n        function radius(data) {\n            return d3.scaleLinear()\n                .domain(data.map(obj => obj.group))\n                .range([10, 60]);\n        }\n        function drag(simulation) {\n            function dragStart(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            }\n            function dragged(d) {\n                d.fx = d3.event.x;\n                d.fy = d3.event.y;\n            }\n            function dragEnd(d) {\n                if (!d3.event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = null;\n                d.fy = null;\n            }\n            return d3.drag()\n                .on(\"start\", dragStart)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragEnd);\n        }\n        function draw(nodeSet, linkSet, currLayer, data) {\n            let simulation = d3.forceSimulation(nodeSet)\n                .force(\"link\", d3.forceLink(linkSet).id(d => d.id).strength(0))\n                .force(\"link\", d3.forceLink(linkSet).distance(d => d.value * 2))\n                .force(\"charge\", d3.forceManyBody().strength(-200))\n                .force(\"center\", d3.forceCenter(width / 2, height / 2));\n            let svg = d3.select(\"svg\")\n                .attr(\"viewBox\", [0, 0, width, height]);\n            let link = svg.append(\"g\")\n                .classed(\"links\", true)\n                .attr(\"stroke\", \"#999\")\n                .attr(\"stroke-opacity\", 0.6)\n                .selectAll(\"line\")\n                .data(linkSet)\n                .join(\"line\")\n                .attr(\"stroke-width\", 1.5);\n            let node = svg.append(\"g\")\n                .classed(\"nodes\", true)\n                .attr(\"stroke\", \"#fff\")\n                .attr(\"stroke-width\", 1.5)\n                .selectAll(\"circle\")\n                .data(nodeSet)\n                .join(\"circle\")\n                .attr(\"r\", d => Math.sqrt(d.group) * 2)\n                .attr(\"fill\", \"#2E86C1\")\n                .on(\"click\", function() {\n                    $(\".infoBox\").remove();\n                    d3.select(this)\n                        .classed(\"clicked\", !d3.select(this).classed(\"clicked\"));\n                    let clickedData = currLayer.filter(obj => obj.name === d3.select(this).select(\"title\").text());\n                    info(d3.select(this).classed(\"clicked\"), clickedData[0]);\n                    let layer = data.filter(obj => obj[\"parent\"] === clickedData[0][\"id\"] || obj[\"name\"] === clickedData[0][\"name\"]);\n                    console.log(layer);\n                    let subTreeSet = netData(layer, clickedData[0][\"name\"]);\n                    console.log(subTreeSet);\n                    let nodeSet = subTreeSet.node.map(d => Object.create(d)),\n                        linkSet = subTreeSet.link.map(d => Object.create(d));\n                    $(\".links\").remove();\n                    $(\".nodes\").remove();\n                    console.log(\"removed, ready to draw\");\n                    draw(nodeSet, linkSet, layer, data);\n                })\n                .call(drag(simulation));\n            node.append(\"title\")\n                .text(d => d.id);\n            simulation.on(\"tick\", () => {\n                link\n                    .attr(\"x1\", d => d.source.x)\n                    .attr(\"y1\", d => d.source.y)\n                    .attr(\"x2\", d => d.target.x)\n                    .attr(\"y2\", d => d.target.y);\n                node\n                    .attr(\"cx\", d => d.x)\n                    .attr(\"cy\", d => d.y);\n            });\n        }\n        function netData(layer, rootName) {\n            let netSet = {\n                node:[],\n                link:[]\n            };\n            layer.forEach(obj => {\n                netSet.node.push({id: obj.name, group: +obj[\"numChildren\"]});\n                if (obj.name !== rootName) {\n                    netSet.link.push({source: rootName, target: obj.name, value: +obj[\"numChildren\"]})\n                }\n            });\n            return netSet;\n        }\n        d3.csv(\"./all-nodes.csv\").then(data => {\n            console.log(data);\n            let firstLayer = data.filter(obj => +obj[\"parent\"] === 0);\n            console.log(firstLayer);\n            let defaultNet = netData(firstLayer, \"root\");\n            console.log(defaultNet);\n            const defaultLinks = defaultNet.link.map(d => Object.create(d));\n            const defaultNodes = defaultNet.node.map(d => Object.create(d));\n            draw(defaultNodes, defaultLinks, firstLayer, data);\n        });\n        return (\n            <svg className=\"Net\" width={width} height={height}/>\n        )\n    }\n}\nexport default Network;"]},"metadata":{},"sourceType":"module"}